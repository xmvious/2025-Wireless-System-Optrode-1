/*
 * Copyright (c) 2018 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

/** @file
 *  @brief Nordic UART Service Client sample (Binary + Framing enabled)
 */

#include <errno.h>
#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/devicetree.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/sys/printk.h>

#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/hci.h>
#include <zephyr/bluetooth/conn.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/gatt.h>

#include <bluetooth/services/nus.h>
#include <bluetooth/services/nus_client.h>
#include <bluetooth/gatt_dm.h>
#include <bluetooth/scan.h>

#include <zephyr/settings/settings.h>
#include <zephyr/drivers/uart.h>
#include <zephyr/logging/log.h>

#define LOG_MODULE_NAME central_uart
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

/* =====================[ 새로 추가/수정된 핵심 상수 ]===================== */

/* 프레이밍 헤더 */
#define FRAME_MAGIC            0xA5C3
#define DEFAULT_CH_MASK        0x0F    /* 필요 시 채널 마스크 사용 (예: 4채널이면 0b1111) */
//#define DEFAULT_FLAGS          0x00
#define FLAG_ASCII_PAYLOAD 0x01

/* MTU 관련 (연결 후 실제 값으로 갱신) */
static uint16_t att_mtu = 23;
static inline uint16_t nus_max_chunk(void) { return (att_mtu > 3) ? (att_mtu - 3) : 20; }

/* UART payload buffer element size (기존 20 -> 바이너리 스트림용으로 크게) */
#define UART_BUF_SIZE          512

#define KEY_PASSKEY_ACCEPT     DK_BTN1_MSK
#define KEY_PASSKEY_REJECT     DK_BTN2_MSK

#define NUS_WRITE_TIMEOUT      K_MSEC(150)
#define UART_WAIT_FOR_BUF_DELAY K_MSEC(50)
/* RX 타임아웃(us). 타임아웃 발생 시 드라이버가 조각을 밀어줌(플랫폼별 동작 상이할 수 있음) */
#define UART_RX_TIMEOUT        50000

/* 버퍼가 너무 커지면 강제로 끊어 처리하는 임계값(임의) */
#define UART_FLUSH_THRESHOLD   (UART_BUF_SIZE - 16)

/* =====================[ 기존 전역/구조체 유지 + 일부 보강 ]===================== */

static const struct device *uart = DEVICE_DT_GET(DT_CHOSEN(nordic_nus_uart));
static struct k_work_delayable uart_work;

K_SEM_DEFINE(nus_write_sem, 0, 1);

/* 기존 extra (유지) */
static struct k_work ble_send_work;
static struct uart_data_t *pending_buf;

struct uart_data_t {
    void   *fifo_reserved;
    uint8_t data[UART_BUF_SIZE];
    uint16_t len;
};

static K_FIFO_DEFINE(fifo_uart_tx_data);
static K_FIFO_DEFINE(fifo_uart_rx_data);

static struct bt_conn *default_conn;
static struct bt_nus_client nus_client;

/* =====================[ 프레이밍 헤더 정의 ]===================== */

typedef struct __packed {
    uint16_t magic;        /* 0xA5C3 */
    uint16_t seq;          /* 증가 시퀀스 (LE) */
    uint16_t payload_len;  /* 뒤따르는 payload 바이트 수 (LE) */
    uint8_t  ch_mask;      /* 사용 채널 비트마스크 */
    uint8_t  flags;        /* 예약/옵션 */
} frame_hdr_t;

static uint16_t g_seq = 0;

/* =====================[ BLE 전송 완료 콜백 ]===================== */

static void ble_data_sent(struct bt_nus_client *nus, uint8_t err,
                          const uint8_t *const data, uint16_t len)
{
    ARG_UNUSED(nus);
    ARG_UNUSED(data);
    ARG_UNUSED(len);

    k_sem_give(&nus_write_sem);

    if (err) {
        LOG_WRN("ATT error code: 0x%02X", err);
    }
}

/* =====================[ BLE 수신 콜백: 바이너리 그대로 UART로 ]===================== */

static uint8_t ble_data_received(struct bt_nus_client *nus,
                                 const uint8_t *data, uint16_t len)
{
    ARG_UNUSED(nus);

    /* 바이너리 경로: 문자열 변환/개행 삽입 금지 */
    for (uint16_t pos = 0; pos < len; ) {
        struct uart_data_t *tx = k_malloc(sizeof(*tx));
        if (!tx) {
            LOG_WRN("UART send buffer alloc failed");
            return BT_GATT_ITER_CONTINUE;
        }

        size_t n = MIN(sizeof(tx->data), (size_t)(len - pos));
        memcpy(tx->data, &data[pos], n);
        tx->len = (uint16_t)n;
        pos += n;

        int err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
        if (err) {
            LOG_WRN("uart_tx failed (%d), enqueueing", err);
            k_fifo_put(&fifo_uart_tx_data, tx);
        } else {
            /* TX_DONE에서 k_free */
        }
    }

    return BT_GATT_ITER_CONTINUE;
}

/* =====================[ UART 콜백: 개행 의존 제거, 임계값/타임아웃으로 flush ]===================== */

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    ARG_UNUSED(dev);
    ARG_UNUSED(user_data);

    static size_t aborted_len;
    static uint8_t *aborted_buf;
    static bool disable_req;
    struct uart_data_t *buf;

    switch (evt->type) {
    case UART_TX_DONE:
        LOG_DBG("UART_TX_DONE");
        if ((evt->data.tx.len == 0) || (!evt->data.tx.buf)) {
            return;
        }

        if (aborted_buf) {
            buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
            aborted_buf = NULL;
            aborted_len = 0;
        } else {
            buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data[0]);
        }

        k_free(buf);

        buf = k_fifo_get(&fifo_uart_tx_data, K_NO_WAIT);
        if (!buf) {
            return;
        }

        if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
            LOG_WRN("Failed to send data over UART");
        }
        break;

    case UART_RX_RDY:
        LOG_DBG("UART_RX_RDY");
        buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data[0]);
        buf->len += evt->data.rx.len;

        if (disable_req) {
            return;
        }

        /* 예전: 개행(\r/\n)에서 끊음 -> 제거.
           지금: 버퍼가 임계값에 도달하면 끊어 처리(=disable) */
        if (buf->len >= UART_FLUSH_THRESHOLD) {
            disable_req = true;
            uart_rx_disable(uart);
        }

        /* 일부 드라이버는 타임아웃을 evt->data.rx.timeout 으로 알려주기도 함.
           사용 가능한 경우, 다음 처럼 활용 가능(옵션):
           if (evt->data.rx.timeout) { disable_req=true; uart_rx_disable(uart); } */
        break;

    case UART_RX_DISABLED:
        LOG_DBG("UART_RX_DISABLED");
        disable_req = false;

        /* NOTE:
         * 이전에는 여기서 '\n' / '\r'를 확인해 pending_buf로 보내곤 했지만,
         * 이제는 라인 단위가 아니므로 그 경로는 사용하지 않음.
         * 실사용 전송은 UART_RX_BUF_RELEASED에서 fifo로 들어온 버퍼를
         * 메인 루프가 프레이밍하여 BLE로 보냄.
         */

        /* 다음 수신을 위해 새 버퍼를 할당하고 RX 재개 */
        buf = k_malloc(sizeof(*buf));
        if (buf) {
            buf->len = 0;
        } else {
            LOG_WRN("Not able to allocate UART receive buffer");
            k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
            return;
        }
        uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
        break;

    case UART_RX_BUF_REQUEST:
        LOG_DBG("UART_RX_BUF_REQUEST");
        buf = k_malloc(sizeof(*buf));
        if (buf) {
            buf->len = 0;
            uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
        } else {
            LOG_WRN("Not able to allocate UART receive buffer");
        }
        break;

    case UART_RX_BUF_RELEASED:
        LOG_DBG("UART_RX_BUF_RELEASED");
        buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data[0]);
        if (buf->len > 0) {
            k_fifo_put(&fifo_uart_rx_data, buf); /* 메인 루프에서 프레임으로 묶어 BLE 전송 */
        } else {
            k_free(buf);
        }
        break;

    case UART_TX_ABORTED:
        LOG_DBG("UART_TX_ABORTED");
        if (!aborted_buf) {
            aborted_buf = (uint8_t *)evt->data.tx.buf;
        }
        aborted_len += evt->data.tx.len;
        buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
        uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
        break;

    default:
        break;
    }
}

/* =====================[ BLE로 보낼 때 MTU 기반 분할 ]===================== */

static int nus_send_chunked(const uint8_t *p, uint16_t len)
{
    while (len) {
        uint16_t n = MIN(nus_max_chunk(), len);
        int err = bt_nus_client_send(&nus_client, p, n);
        if (err) {
            return err;
        }
        int s = k_sem_take(&nus_write_sem, NUS_WRITE_TIMEOUT);
        if (s) {
            LOG_WRN("NUS send timeout");
        }
        p   += n;
        len -= n;
    }
    return 0;
}

/* =====================[ UART 조각 -> 프레임 구성 -> BLE 전송 ]===================== */

static int send_frame_over_nus(const uint8_t *payload, uint16_t payload_len,
                               uint8_t ch_mask, uint8_t flags)
{
    if (!default_conn) return -ENOTCONN;

    /* 헤더 + 페이로드 합본을 한 번에 만들고, 청크 분할은 nus_send_chunked에서 수행 */
    const uint16_t total_len = sizeof(frame_hdr_t) + payload_len;

    uint8_t *frame = k_malloc(total_len);
    if (!frame) return -ENOMEM;

    frame_hdr_t hdr;
    hdr.magic       = sys_cpu_to_le16(FRAME_MAGIC);
    hdr.seq         = sys_cpu_to_le16(g_seq++);
    hdr.payload_len = sys_cpu_to_le16(payload_len);
    hdr.ch_mask     = ch_mask;
    hdr.flags       = flags;

    memcpy(frame, &hdr, sizeof(hdr));
    memcpy(frame + sizeof(hdr), payload, payload_len);

    int err = nus_send_chunked(frame, total_len);
    k_free(frame);

    return err;
}

/* =====================[ 기존 워크 핸들러 (유지) ]===================== */
/* (지금은 라인 기반 전송이 아니라 사용 안 하지만, 최소 수정 원칙으로 남겨둠) */
static void ble_send_work_handler(struct k_work *w)
{
    if (!default_conn || !pending_buf) {
        return;
    }

    int err = nus_send_chunked(pending_buf->data, pending_buf->len);
    if (err) {
        LOG_ERR("Failed to send to peripheral (err %d)", err);
    } else {
        LOG_INF("Sent %u bytes (legacy path)", pending_buf->len);
    }
    k_free(pending_buf);
    pending_buf = NULL;
}

/* =====================[ UART init (기존 유지) ]===================== */

static void uart_work_handler(struct k_work *item)
{
    struct uart_data_t *buf = k_malloc(sizeof(*buf));
    if (buf) {
        buf->len = 0;
    } else {
        LOG_WRN("Not able to allocate UART receive buffer");
        k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
        return;
    }

    uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
}

static int uart_init(void)
{
    int err;
    struct uart_data_t *rx;

    if (!device_is_ready(uart)) {
        LOG_ERR("UART device not ready");
        return -ENODEV;
    }

    rx = k_malloc(sizeof(*rx));
    if (rx) {
        rx->len = 0;
    } else {
        return -ENOMEM;
    }

    k_work_init_delayable(&uart_work, uart_work_handler);

    err = uart_callback_set(uart, uart_cb, NULL);
    if (err) {
        return err;
    }

    return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_RX_TIMEOUT);
}

/* =====================[ GATT/NUS discovery (기존 유지) ]===================== */

static void discovery_complete(struct bt_gatt_dm *dm, void *context)
{
    struct bt_nus_client *nus = context;
    LOG_INF("Service discovery completed");

    bt_gatt_dm_data_print(dm);
    bt_nus_handles_assign(dm, nus);

    int err = bt_nus_subscribe_receive(nus);
    if (err) {
        LOG_ERR("bt_nus_subscribe_receive() failed (err %d)", err);
    } else {
        LOG_INF("bt_nus_subscribe_receive() successful");
    }

    bt_gatt_dm_data_release(dm);
}

static void discovery_service_not_found(struct bt_conn *conn, void *context)
{
    LOG_INF("Service not found");
}

static void discovery_error(struct bt_conn *conn, int err, void *context)
{
    LOG_WRN("Error while discovering GATT database: (%d)", err);
}

struct bt_gatt_dm_cb discovery_cb = {
    .completed         = discovery_complete,
    .service_not_found = discovery_service_not_found,
    .error_found       = discovery_error,
};

static void gatt_discover(struct bt_conn *conn)
{
    int err;

    if (conn != default_conn) {
        return;
    }

    err = bt_gatt_dm_start(conn, BT_UUID_NUS_SERVICE, &discovery_cb, &nus_client);
    if (err) {
        LOG_ERR("could not start the discovery procedure, error code: %d", err);
    }
}

/* =====================[ MTU 교환 콜백: 실제 MTU 저장 ]===================== */

static void exchange_func(struct bt_conn *conn, uint8_t err, struct bt_gatt_exchange_params *params)
{
    if (!err) {
        att_mtu = bt_gatt_get_mtu(conn);
        LOG_INF("MTU exchange done: att_mtu=%u, NUS chunk=%u", att_mtu, nus_max_chunk());
    } else {
        LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
    }
}

/* =====================[ 연결/해제/보안 콜백 (기존 유지 + MTU 교환) ]===================== */

static void connected(struct bt_conn *conn, uint8_t conn_err)
{
    char addr[BT_ADDR_LE_STR_LEN];
    int err;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (conn_err) {
        LOG_INF("Failed to connect to %s, 0x%02x %s", addr, conn_err, bt_hci_err_to_str(conn_err));

        if (default_conn == conn) {
            bt_conn_unref(default_conn);
            default_conn = NULL;

            err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
            if (err) {
                LOG_ERR("Scanning failed to start (err %d)", err);
            }
        }
        return;
    }

    LOG_INF("Connected: %s", addr);

    static struct bt_gatt_exchange_params exchange_params;
    exchange_params.func = exchange_func;
    err = bt_gatt_exchange_mtu(conn, &exchange_params);
    if (err) {
        LOG_WRN("MTU exchange failed (err %d)", err);
    }

    gatt_discover(conn);

    err = bt_scan_stop();
    if ((!err) && (err != -EALREADY)) {
        LOG_ERR("Stop LE scan failed (err %d)", err);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    int err;

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    LOG_INF("Disconnected: %s, reason 0x%02x %s", addr, reason, bt_hci_err_to_str(reason));

    if (default_conn != conn) {
        return;
    }

    bt_conn_unref(default_conn);
    default_conn = NULL;

    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) {
        LOG_ERR("Scanning failed to start (err %d)", err);
    }
}

static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err)
{
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (!err) {
        LOG_INF("Security changed: %s level %u", addr, level);
    } else {
        LOG_WRN("Security failed: %s level %u err %d %s", addr, level, err,
                bt_security_err_to_str(err));
    }

    gatt_discover(conn);
}

BT_CONN_CB_DEFINE(conn_callbacks) = {
    .connected = connected,
    .disconnected = disconnected,
    .security_changed = security_changed
};

/* =====================[ 스캔 콜백/초기화 (기존 유지) ]===================== */

static void scan_filter_match(struct bt_scan_device_info *device_info,
                              struct bt_scan_filter_match *filter_match,
                              bool connectable)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    LOG_INF("Filters matched. Address: %s connectable: %d", addr, connectable);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    LOG_WRN("Connecting failed");
}

static void scan_connecting(struct bt_scan_device_info *device_info, struct bt_conn *conn)
{
    default_conn = bt_conn_ref(conn);
}

static int nus_client_init(void)
{
    int err;
    struct bt_nus_client_init_param init = {
        .cb = {
            .received = ble_data_received,
            .sent     = ble_data_sent,
        }
    };

    err = bt_nus_client_init(&nus_client, &init);
    if (err) {
        LOG_ERR("NUS Client initialization failed (err %d)", err);
        return err;
    }

    LOG_INF("NUS Client module initialized");
    return err;
}

BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, scan_connecting);

static int scan_init(void)
{
    int err;
    struct bt_scan_init_param scan_init = {
        .connect_if_match = 1,
    };

    bt_scan_init(&scan_init);
    bt_scan_cb_register(&scan_cb);

    err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
    if (err) {
        LOG_ERR("Scanning filters cannot be set (err %d)", err);
        return err;
    }

    err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    if (err) {
        LOG_ERR("Filters cannot be turned on (err %d)", err);
        return err;
    }

    LOG_INF("Scan module initialized");
    return err;
}

/* =====================[ 페어링 콜백 (기존 유지) ]===================== */

static void auth_cancel(struct bt_conn *conn)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing cancelled: %s", addr);
}

static void pairing_complete(struct bt_conn *conn, bool bonded)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_WRN("Pairing failed conn: %s, reason %d %s", addr, reason, bt_security_err_to_str(reason));
}

static struct bt_conn_auth_cb conn_auth_callbacks = {
    .cancel = auth_cancel,
};

static struct bt_conn_auth_info_cb conn_auth_info_callbacks = {
    .pairing_complete = pairing_complete,
    .pairing_failed   = pairing_failed
};

/* =====================[ main() ]===================== */

int main(void)
{
    int err;

    err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    if (err) {
        LOG_ERR("Failed to register authorization callbacks.");
        return 0;
    }

    err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    if (err) {
        printk("Failed to register authorization info callbacks.\n");
        return 0;
    }

    err = bt_enable(NULL);
    if (err) {
        LOG_ERR("Bluetooth init failed (err %d)", err);
        return 0;
    }
    LOG_INF("Bluetooth initialized");

    if (IS_ENABLED(CONFIG_SETTINGS)) {
        settings_load();
    }

    err = uart_init();
    if (err != 0) {
        LOG_ERR("uart_init failed (err %d)", err);
        return 0;
    }

    err = scan_init();
    if (err != 0) {
        LOG_ERR("scan_init failed (err %d)", err);
        return 0;
    }

    err = nus_client_init();
    if (err != 0) {
        LOG_ERR("nus_client_init failed (err %d)", err);
        return 0;
    }

    printk("Starting Bluetooth Central UART (Binary+Frame)\n");

    k_work_init(&ble_send_work, ble_send_work_handler); /* (유지) */

    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) {
        LOG_ERR("Scanning failed to start (err %d)", err);
        return 0;
    }
    LOG_INF("Scanning successfully started");

    /* ===== 메인 루프: UART에서 받은 조각을 프레임으로 묶어 BLE로 전송 ===== */
    for (;;) {
        struct uart_data_t *buf = k_fifo_get(&fifo_uart_rx_data, K_FOREVER);

        if (buf && buf->len) {
            /* 필요시 ch_mask/flags 동적 설정 가능. 우선 기본값 */
            int e = send_frame_over_nus(buf->data, buf->len, DEFAULT_CH_MASK, FLAG_ASCII_PAYLOAD);
            if (e) {
                LOG_WRN("send_frame_over_nus err=%d (len=%u)", e, buf->len);
            }
        }

        if (buf) {
            k_free(buf);
        }
    }
}
