/*
 * Nordic NUS Central (Binary + Framing)
 * - UART 조각 → Frame(header+payload) → NUS 청크 분할 전송
 * - BLE 수신(퍼리→센터럴)은 그대로 UART로 바이너리 패스스루
 */

#include <errno.h>
#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/devicetree.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/sys/printk.h>
#include <zephyr/bluetooth/gap.h>

#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/hci.h>
#include <zephyr/bluetooth/conn.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/gatt.h>

#include <bluetooth/services/nus.h>
#include <bluetooth/services/nus_client.h>
#include <bluetooth/gatt_dm.h>
#include <bluetooth/scan.h>

#include <zephyr/settings/settings.h>
#include <zephyr/drivers/uart.h>
#include <zephyr/logging/log.h>
#include <inttypes.h>

#define LOG_MODULE_NAME central_uart
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

/* =====================[ 프레이밍/링크 상수 ]===================== */
#define FRAME_MAGIC            0xA5C3
#define DEFAULT_CH_MASK        0x0F
#define FLAG_ASCII_PAYLOAD     0x01

static uint16_t att_mtu = 23;
static inline uint16_t nus_max_chunk(void) { return (att_mtu > 3) ? (att_mtu - 3) : 20; }

#define UART_BUF_SIZE           512
#define NUS_WRITE_TIMEOUT       K_MSEC(150)
#define UART_WAIT_FOR_BUF_DELAY K_MSEC(50)
#define UART_RX_TIMEOUT         50000
#define UART_FLUSH_THRESHOLD    (UART_BUF_SIZE - 16)

/* =====================[ 전역 선언/전방 선언 ]===================== */
struct uart_data_t; /* 전방 선언 */
static struct uart_data_t *pending_buf; /* (레거시 워크 경로에서만 사용) */

static const struct device *uart = DEVICE_DT_GET(DT_CHOSEN(nordic_nus_uart));
static struct k_work_delayable uart_work;
static struct k_work ble_send_work;

K_SEM_DEFINE(nus_write_sem, 0, 1);

struct uart_data_t {
    void   *fifo_reserved;
    uint8_t data[UART_BUF_SIZE];
    uint16_t len;
};

static K_FIFO_DEFINE(fifo_uart_tx_data);
static K_FIFO_DEFINE(fifo_uart_rx_data);

static struct bt_conn *default_conn;
static struct bt_nus_client nus_client;

/* =====================[ 프레이밍 헤더 ]===================== */
typedef struct __packed {
    uint16_t magic;
    uint16_t seq;          /* LE */
    uint16_t payload_len;  /* LE */
    uint8_t  ch_mask;
    uint8_t  flags;
} frame_hdr_t;

static uint16_t g_seq = 0;

/* =====================[ NUS 콜백 ]===================== */
static void ble_data_sent(struct bt_nus_client *nus, uint8_t err,
                          const uint8_t *const data, uint16_t len)
{
    ARG_UNUSED(nus); ARG_UNUSED(data); ARG_UNUSED(len);
    k_sem_give(&nus_write_sem);
    if (err) LOG_WRN("ATT error code: 0x%02X", err);
}

/* 퍼리→센터럴 수신: 그대로 UART로 바이너리 패스스루 */
static uint8_t ble_data_received(struct bt_nus_client *nus,
                                 const uint8_t *data, uint16_t len)
{
    ARG_UNUSED(nus);

    for (uint16_t pos = 0; pos < len; ) {
        struct uart_data_t *tx = k_malloc(sizeof(*tx));
        if (!tx) { LOG_WRN("UART send buffer alloc failed"); return BT_GATT_ITER_CONTINUE; }

        size_t n = MIN(sizeof(tx->data), (size_t)(len - pos));
        memcpy(tx->data, &data[pos], n);
        tx->len = (uint16_t)n;
        pos += n;

        int err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
        if (err) {
            LOG_WRN("uart_tx failed (%d), enqueueing", err);
            /* [ADDED] 실패 시 즉시 재큐잉하여 TX_DONE 경로에서 재시도 */
            k_fifo_put(&fifo_uart_tx_data, tx);  // [ADDED]
        } else {
            /* free는 TX_DONE에서 */
        }
    }
    return BT_GATT_ITER_CONTINUE;
}

/* =====================[ UART 콜백 ]===================== */
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    ARG_UNUSED(dev); ARG_UNUSED(user_data);

    static size_t aborted_len;
    static uint8_t *aborted_buf;
    static bool disable_req;
    struct uart_data_t *buf;

    switch (evt->type) {
    case UART_TX_DONE: {
        if (!evt->data.tx.len || !evt->data.tx.buf) return;

        if (aborted_buf) {
            buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
            aborted_buf = NULL;
            aborted_len = 0;
        } else {
            buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data[0]);
        }
        k_free(buf);

        buf = k_fifo_get(&fifo_uart_tx_data, K_NO_WAIT);
        if (buf) {
            if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
                LOG_WRN("Failed to send data over UART");
            }
        }
    } break;

    case UART_TX_ABORTED: {
        if (!aborted_buf) aborted_buf = (uint8_t *)evt->data.tx.buf;
        aborted_len += evt->data.tx.len;
        buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
        uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
    } break;

    case UART_RX_RDY: {
        /* offset/len 기준으로 안전 복사 */
        buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data[0]);
        size_t space_left = sizeof(buf->data) - buf->len;
        size_t copy_len   = MIN(space_left, (size_t)evt->data.rx.len);
        if (copy_len == 0) { uart_rx_disable(uart); return; }

        memcpy(&buf->data[buf->len],
               &evt->data.rx.buf[evt->data.rx.offset],
               copy_len);
        buf->len += copy_len;

        if (!disable_req && buf->len >= UART_FLUSH_THRESHOLD) {
            disable_req = true;
            uart_rx_disable(uart);
        }
    } break;

    case UART_RX_DISABLED: {
        disable_req = false;

        /* 다음 수신을 위한 새 버퍼 할당 + 재개 */
        buf = k_malloc(sizeof(*buf));
        if (!buf) {
            LOG_WRN("Not able to allocate UART receive buffer");
            k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
            return;
        }
        buf->len = 0;
        uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
    } break;

    case UART_RX_BUF_REQUEST: {
        buf = k_malloc(sizeof(*buf));
        if (buf) {
            buf->len = 0;
            uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
        } else {
            LOG_WRN("Not able to allocate UART receive buffer");
        }
    } break;

    case UART_RX_BUF_RELEASED: {
        buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data[0]);
        if (buf->len > 0) {
            /* 메인 루프에서 프레임으로 묶어 BLE로 전송 */
            k_fifo_put(&fifo_uart_rx_data, buf);
        } else {
            k_free(buf);
        }
    } break;

    default:
        break;
    }
}

/* =====================[ NUS 전송 유틸(청크 분할) ]===================== */
static int nus_send_chunked(const uint8_t *p, uint16_t len)
{
    while (len) {
        uint16_t n = MIN(nus_max_chunk(), len);
        int err = bt_nus_client_send(&nus_client, p, n);
        if (err) return err;
        if (k_sem_take(&nus_write_sem, NUS_WRITE_TIMEOUT)) {
            LOG_WRN("NUS send timeout");
        }
        p   += n;
        len -= n;
    }
    return 0;
}

/* =====================[ UART 조각 → 프레임 → BLE ]===================== */
static int send_frame_over_nus(const uint8_t *payload, uint16_t payload_len,
                               uint8_t ch_mask, uint8_t flags)
{
    if (!default_conn) return -ENOTCONN;

    const uint16_t total_len = sizeof(frame_hdr_t) + payload_len;
    uint8_t *frame = k_malloc(total_len);
    if (!frame) return -ENOMEM;

    frame_hdr_t hdr;
    hdr.magic       = sys_cpu_to_le16(FRAME_MAGIC);
    hdr.seq         = sys_cpu_to_le16(g_seq++);
    hdr.payload_len = sys_cpu_to_le16(payload_len);
    hdr.ch_mask     = ch_mask;
    hdr.flags       = flags;

    memcpy(frame, &hdr, sizeof(hdr));
    memcpy(frame + sizeof(hdr), payload, payload_len);

    int err = nus_send_chunked(frame, total_len);
    k_free(frame);
    return err;
}

/* (레거시) 라인 기반 경로 — 유지만 */
static void ble_send_work_handler(struct k_work *w)
{
    if (!default_conn || !pending_buf) return;
    int err = nus_send_chunked(pending_buf->data, pending_buf->len);
    if (err) LOG_ERR("Failed to send (err %d)", err);
    k_free(pending_buf);
    pending_buf = NULL;
}

/* =====================[ UART 초기화 ]===================== */
static void uart_work_handler(struct k_work *item)
{
    struct uart_data_t *buf = k_malloc(sizeof(*buf));
    if (!buf) {
        LOG_WRN("Not able to allocate UART receive buffer");
        k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
        return;
    }
    buf->len = 0;
    uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
}

static int uart_init(void)
{
    int err;
    struct uart_data_t *rx;

    if (!device_is_ready(uart)) {
        LOG_ERR("UART device not ready");
        return -ENODEV;
    }

    rx = k_malloc(sizeof(*rx));
    if (!rx) return -ENOMEM;
    rx->len = 0;

    k_work_init_delayable(&uart_work, uart_work_handler);

    err = uart_callback_set(uart, uart_cb, NULL);
    if (err) return err;

    return uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_RX_TIMEOUT);
}

/* =====================[ GATT/NUS discovery ]===================== */
static void discovery_complete(struct bt_gatt_dm *dm, void *context)
{
    struct bt_nus_client *nus = context;
    LOG_INF("Service discovery completed");
    bt_gatt_dm_data_print(dm);
    bt_nus_handles_assign(dm, nus);

    int err = bt_nus_subscribe_receive(nus);
    if (err) LOG_ERR("bt_nus_subscribe_receive() failed (err %d)", err);
    bt_gatt_dm_data_release(dm);
}

static void discovery_service_not_found(struct bt_conn *conn, void *context)
{
    LOG_INF("Service not found");
}

static void discovery_error(struct bt_conn *conn, int err, void *context)
{
    LOG_WRN("Error while discovering GATT database: (%d)", err);
}

static struct bt_gatt_dm_cb discovery_cb = {
    .completed         = discovery_complete,
    .service_not_found = discovery_service_not_found,
    .error_found       = discovery_error,
};

static void gatt_discover(struct bt_conn *conn)
{
    if (conn != default_conn) return;
    int err = bt_gatt_dm_start(conn, BT_UUID_NUS_SERVICE, &discovery_cb, &nus_client);
    if (err) LOG_ERR("gatt_dm_start error: %d", err);
}

/* =====================[ MTU 교환 & 링크 파라미터 ]===================== */
static void exchange_func(struct bt_conn *conn, uint8_t err, struct bt_gatt_exchange_params *params)
{
    if (!err) {
        att_mtu = bt_gatt_get_mtu(conn);
        LOG_INF("MTU exchange done: att_mtu=%u, NUS chunk=%u", att_mtu, nus_max_chunk());
    } else {
        LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
    }
}

static void request_link_upgrades(struct bt_conn *conn)
{
    /* 1) 짧은 연결 파라미터 요청 (interval 7.5~15 ms) */
    const struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 12, 0, 400);
    int e2 = bt_conn_le_param_update(conn, param);
    if (e2) {
        LOG_WRN("Conn param update req failed: %d", e2);
    }

    /* 2) PHY 2M 요청 */
#if defined(CONFIG_BT_USER_PHY_UPDATE) || defined(CONFIG_BT_PHY_UPDATE)
    struct bt_conn_le_phy_param phy = {
        .options = 0,
        .pref_tx_phy = BT_GAP_LE_PHY_2M,
        .pref_rx_phy = BT_GAP_LE_PHY_2M,
    };
    int e_phy = bt_conn_le_phy_update(conn, &phy);
    if (e_phy) {
        LOG_WRN("PHY update req failed: %d", e_phy);
    } else {
        LOG_INF("PHY update requested (2M preferred)");
    }
#endif

    /* 3) Data Length Extension 요청 */
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE) || defined(CONFIG_BT_DATA_LEN_UPDATE)
    struct bt_conn_le_data_len_param dlp = {
        .tx_max_len  = BT_GAP_DATA_LEN_MAX,   /* 251 bytes */
        .tx_max_time = BT_GAP_DATA_TIME_MAX,  /* 2120 µs */
    };
    int e_dle = bt_conn_le_data_len_update(conn, &dlp);
    if (e_dle) {
        LOG_WRN("Data len update req failed: %d", e_dle);
    } else {
        LOG_INF("Data length update requested (len=%u, time=%u)",
                dlp.tx_max_len, dlp.tx_max_time);
    }
#endif
}

/* =====================[ 연결/해제/보안 콜백 ]===================== */
static void connected(struct bt_conn *conn, uint8_t conn_err)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (conn_err) {
        LOG_INF("Failed to connect to %s, 0x%02x %s", addr, conn_err, bt_hci_err_to_str(conn_err));
        if (default_conn == conn) { bt_conn_unref(default_conn); default_conn = NULL; }
        int err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
        if (err) LOG_ERR("Scanning failed to start (err %d)", err);
        return;
    }

    LOG_INF("Connected: %s", addr);

    /* MTU 교환 */
    static struct bt_gatt_exchange_params exchange_params;
    exchange_params.func = exchange_func;
    int err = bt_gatt_exchange_mtu(conn, &exchange_params);
    if (err) LOG_WRN("MTU exchange failed (err %d)", err);

    request_link_upgrades(conn); /* [ADDED] 내부에서 PHY/DLE까지 요청 */

    gatt_discover(conn);

    err = bt_scan_stop();
    if ((!err) && (err != -EALREADY)) LOG_ERR("Stop LE scan failed (err %d)", err);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Disconnected: %s, reason 0x%02x %s", addr, reason, bt_hci_err_to_str(reason));

    if (default_conn != conn) return;
    bt_conn_unref(default_conn);
    default_conn = NULL;

    int err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) LOG_ERR("Scanning failed to start (err %d)", err);
}

static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (!err) LOG_INF("Security changed: %s level %u", addr, level);
    else      LOG_WRN("Security failed: %s level %u err %d %s", addr, level, err,
                      bt_security_err_to_str(err));
    gatt_discover(conn);
}

BT_CONN_CB_DEFINE(conn_callbacks) = {
    .connected        = connected,
    .disconnected     = disconnected,
    .security_changed = security_changed
};

/* =====================[ 스캔 콜백/초기화 ]===================== */
static void scan_filter_match(struct bt_scan_device_info *device_info,
                              struct bt_scan_filter_match *filter_match,
                              bool connectable)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    LOG_INF("Filters matched. Address: %s connectable: %d", addr, connectable);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    LOG_WRN("Connecting failed");
}

static void scan_connecting(struct bt_scan_device_info *device_info, struct bt_conn *conn)
{
    default_conn = bt_conn_ref(conn);
}

static int nus_client_init(void)
{
    struct bt_nus_client_init_param init = {
        .cb = { .received = ble_data_received, .sent = ble_data_sent }
    };
    int err = bt_nus_client_init(&nus_client, &init);
    if (err) LOG_ERR("NUS Client init failed (err %d)", err);
    else     LOG_INF("NUS Client module initialized");
    return err;
}

BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, scan_connecting);

static int scan_init(void)
{
    int err;
    struct bt_scan_init_param scan_init = { .connect_if_match = 1 };
    bt_scan_init(&scan_init);
    bt_scan_cb_register(&scan_cb);

    err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
    if (err) return err;
    err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    if (err) return err;

    LOG_INF("Scan module initialized");
    return 0;
}

/* =====================[ 페어링 콜백 (필요 시) ]===================== */
static void auth_cancel(struct bt_conn *conn)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing cancelled: %s", addr);
}
static void pairing_complete(struct bt_conn *conn, bool bonded)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
}
static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_WRN("Pairing failed: %s, reason %d %s", addr, reason, bt_security_err_to_str(reason));
}
static struct bt_conn_auth_cb conn_auth_callbacks = { .cancel = auth_cancel };
static struct bt_conn_auth_info_cb conn_auth_info_callbacks = {
    .pairing_complete = pairing_complete, .pairing_failed = pairing_failed };

/* =====================[ main() ]===================== */
int main(void)
{
    int err;

    err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    if (err) { LOG_ERR("Auth cb register failed"); return 0; }
    err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    if (err) { LOG_ERR("Auth info cb register failed"); return 0; }

    err = bt_enable(NULL);
    if (err) { LOG_ERR("Bluetooth init failed (err %d)", err); return 0; }
    LOG_INF("Bluetooth initialized");

    if (IS_ENABLED(CONFIG_SETTINGS)) settings_load();

    err = uart_init();
    if (err) { LOG_ERR("uart_init failed (err %d)", err); return 0; }

    err = scan_init();
    if (err) { LOG_ERR("scan_init failed (err %d)", err); return 0; }

    err = nus_client_init();
    if (err) { LOG_ERR("nus_client_init failed (err %d)", err); return 0; }

    printk("Starting Bluetooth Central UART (Binary+Frame)\n");

    k_work_init(&ble_send_work, ble_send_work_handler); /* 레거시 유지 */

    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) { LOG_ERR("Scanning failed to start (err %d)", err); return 0; }
    LOG_INF("Scanning successfully started");

    /* ===== 메인 루프: UART 수신 데이터 → 그대로 BLE 전송 ===== */
    for (;;) {
      struct uart_data_t *buf = k_fifo_get(&fifo_uart_rx_data, K_FOREVER);
      if (buf && buf->len) {
        // >>> 수정된 로직: UART 데이터를 프레임으로 감싸지 않고 그대로 전송 <<<
        int e = nus_send_chunked(buf->data, buf->len);
        if (e) LOG_WRN("nus_send_chunked err=%d (len=%u)", e, buf->len);
      }
      if (buf) k_free(buf);
    }
}
