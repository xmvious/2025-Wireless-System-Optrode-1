# -*- coding: utf-8 -*-
"""
PyQt5 + PyQtGraph 기반 4채널 실시간 플로터 (Binary Frame + CSV 호환)
- Binary frame + CSV 하위호환 파싱
- Start/Stop, Stim 전송, CH 가시성 토글, Merge/Split
- 패킷 로스/갭 감지
- 상태바: rx fps, sps(all), per-ch sps(실시간 추정), loss/s, malformed/s, gaps/s, target 달성률
- 자동 재연결/포트 리프레시
- 성능 최적화: 블록 처리 + CSV 블록 writerows

[표시 관련]
- x축: 가상 시간(t_virtual) = Σ(samples / per_ch_sps_est)  ← 프레임로딩 보정
- 곡선: 선 없이 **점만 표시** (pen=None, symbol='o')
- 다운샘플링/디시메이트 비활성화 (왜곡 방지)
"""

import sys, os, csv, struct, threading
from threading import Lock
from collections import deque
from datetime import datetime

import serial
from serial.tools import list_ports

import numpy as np
import pyqtgraph as pg
from PyQt5 import QtWidgets, QtCore

# ===== 설정 =====
PORT = "COM3"
BAUDRATE = 1_000_000
MAX_POINTS = 500
UPDATE_INTERVAL_MS = 100
RECONNECT_INTERVAL_MS = 1000
Y_MIN, Y_MAX = 0, 4095
CHANNEL_COLORS = ['r', 'g', 'b', 'y']

SAMPLES_PER_PACKET = 4
TARGET_TOTAL_SPS = 16000
PRINT_TO_CONSOLE = False

# ===== Binary Frame =====
FRAME_MAGIC = 0xA5C3
FRAME_HDR_FMT = "<HHHBB"
FRAME_HDR_SIZE = struct.calcsize(FRAME_HDR_FMT)
FLAG_ASCII_PAYLOAD = 0x01

PREFER_BINARY = True


class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Live ADC Data (4CH) - Binary Frame + CSV compatible (mV, time)")

        # 데이터 버퍼
        self.data_queues = [deque([0]*MAX_POINTS, maxlen=MAX_POINTS) for _ in range(4)]
        self.channel_visible = [True, True, True, True]
        self.logging_enabled = False
        self.streaming_enabled = False
        self.csv_file = None
        self.csv_writer = None
        self.csv_flush_timer = None
        self.last_csv_filename = None
        self.ser = None
        self.reader_thread = None
        self.reader_stop = threading.Event()
        self.merged = False

        # 누적 통계
        self.total_packets = 0
        self.lost_packets = 0
        self.malformed_lines = 0
        self.gap_count = 0
        self.last_seq = None
        self.last_time = None
        self.dt_history = deque(maxlen=200)

        # 레이트 계산 + 1초 통계
        self.frames_since_last = 0
        self.loss_since_last = 0
        self.malformed_since_last = 0
        self.gaps_since_last = 0
        self.rate_lock = Lock()
        self.prev_stats_time = QtCore.QTime.currentTime()

        # 최근 프레임 정보
        self.last_spp = SAMPLES_PER_PACKET    # 프레임당 int16 총 개수
        self.last_n_ch = 4                    # 활성 채널 수
        self.last_rx_time = QtCore.QTime.currentTime()

        # 가상 시간(초) + 채널당 샘플레이트 실시간 추정치(EMA)
        self.t_virtual = 0.0
        self.per_ch_sps_est = 1000.0          # 초기값 → 자동 수렴
        self.per_ch_sps_alpha = 0.15          # EMA 계수

        # ========== UI ==========
        central = QtWidgets.QWidget(); self.setCentralWidget(central)
        vbox = QtWidgets.QVBoxLayout(central)
        ctrl = QtWidgets.QHBoxLayout()

        ctrl.addWidget(QtWidgets.QLabel("Port"))
        self.port_combo = QtWidgets.QComboBox(); self.refresh_ports(); ctrl.addWidget(self.port_combo)

        self.btn_refresh = QtWidgets.QPushButton("Refresh")
        self.btn_refresh.setToolTip("포트 목록 갱신 및 자동 오픈")
        self.btn_refresh.clicked.connect(self.on_refresh_clicked)
        ctrl.addWidget(self.btn_refresh)

        # Stim 파라미터
        ctrl.addWidget(QtWidgets.QLabel("Pulse"));  self.pulse_edit  = QtWidgets.QLineEdit(); self.pulse_edit.setFixedWidth(70);  ctrl.addWidget(self.pulse_edit)
        ctrl.addWidget(QtWidgets.QLabel("Period")); self.period_edit = QtWidgets.QLineEdit(); self.period_edit.setFixedWidth(70); ctrl.addWidget(self.period_edit)
        ctrl.addWidget(QtWidgets.QLabel("Duty"));   self.duty_edit   = QtWidgets.QLineEdit(); self.duty_edit.setFixedWidth(70);   ctrl.addWidget(self.duty_edit)
        self.btn_stim = QtWidgets.QPushButton("Stim"); self.btn_stim.clicked.connect(self.send_stimulus); ctrl.addWidget(self.btn_stim)

        ctrl.addStretch()
        self.btn_start = QtWidgets.QPushButton("Start"); self.btn_start.clicked.connect(self.start_logging); ctrl.addWidget(self.btn_start)
        self.btn_stop  = QtWidgets.QPushButton("Stop");  self.btn_stop.clicked.connect(self.stop_logging);  ctrl.addWidget(self.btn_stop)
        self.btn_merge_split = QtWidgets.QPushButton("Merge"); self.btn_merge_split.clicked.connect(self.toggle_merge_split); ctrl.addWidget(self.btn_merge_split)
        self.btn_reset = QtWidgets.QPushButton("Reset View"); self.btn_reset.clicked.connect(self.reset_view); ctrl.addWidget(self.btn_reset)

        for i in range(4):
            cb = QtWidgets.QCheckBox(f"CH{i+1}"); cb.setChecked(True)
            cb.stateChanged.connect(lambda state, idx=i: self.toggle_channel(idx, state))
            ctrl.addWidget(cb)

        self.btn_open = QtWidgets.QPushButton("Open CSV"); self.btn_open.clicked.connect(self.open_csv); ctrl.addWidget(self.btn_open)
        vbox.addLayout(ctrl)

        self.graphics = pg.GraphicsLayoutWidget(); vbox.addWidget(self.graphics)
        self.create_split_plots()

        self.status = self.statusBar(); self.status.showMessage("Ready (mode: BIN first, CSV fallback)")

        self.timer = QtCore.QTimer(self); self.timer.timeout.connect(self.update_plot); self.timer.start(UPDATE_INTERVAL_MS)
        self.stats_timer = QtCore.QTimer(self); self.stats_timer.timeout.connect(self.update_statusbar_stats); self.stats_timer.start(1000)

        self.reconnect_timer = QtCore.QTimer(self); self.reconnect_timer.timeout.connect(self.auto_reconnect_tick); self.reconnect_timer.start(RECONNECT_INTERVAL_MS)

        self.try_open_serial(); self.start_reader_thread()
        self.destroyed.connect(self.cleanup)
        self.resize(1000, 800)

    # ----- 포트 -----
    def refresh_ports(self):
        self.port_combo.clear()
        ports = [p.device for p in list_ports.comports()]
        if ports:
            if PORT in ports:
                ports.remove(PORT); ports.insert(0, PORT)
            self.port_combo.addItems(ports)
        else:
            self.port_combo.addItem("No Ports")

    def on_refresh_clicked(self):
        self.refresh_ports()
        if self.ser is None and not self.streaming_enabled and not self.logging_enabled:
            self.try_open_serial()

    def try_open_serial(self):
        if self.ser:
            try: self.ser.close()
            except Exception: pass
            self.ser = None

        candidates = []
        sel = self.port_combo.currentText() if self.port_combo.count() > 0 else None
        if sel and sel != "No Ports": candidates.append(sel)
        for p in list_ports.comports():
            desc = (p.description or "").lower()
            if "jlink" in desc or "j-link" in desc:
                if p.device not in candidates: candidates.append(p.device)
        if not candidates:
            self.status.showMessage("No serial ports available"); return

        def open_one(port_name: str):
            try:
                ser = serial.Serial(port=port_name, baudrate=BAUDRATE, timeout=0.1, write_timeout=0.2,
                                    bytesize=serial.EIGHTBITS, parity=serial.PARITY_NONE,
                                    stopbits=serial.STOPBITS_ONE, xonxoff=False, rtscts=False, dsrdtr=False)
                try:
                    ser.setDTR(True); ser.setRTS(True)
                    ser.reset_input_buffer(); ser.reset_output_buffer()
                except Exception: pass
                return ser
            except Exception:
                return None

        for port in candidates:
            ser = open_one(port)
            if not ser: continue
            ok = False
            try:
                ser.write(b"on\n"); QtCore.QThread.msleep(200)
                if ser.in_waiting: ok = True
            except Exception: ok = False

            if ok:
                try:
                    ser.write(b"off\n"); QtCore.QThread.msleep(50)
                    ser.reset_input_buffer(); ser.reset_output_buffer()
                except Exception: pass
                self.ser = ser
                idx = self.port_combo.findText(port)
                if idx >= 0: self.port_combo.setCurrentIndex(idx)
                self.status.showMessage(f"Serial opened: {port} @ {BAUDRATE}")
                self.last_rx_time = QtCore.QTime.currentTime()
                return
            else:
                try: ser.close()
                except Exception: pass

        self.status.showMessage("Serial open failed: no responding J-Link CDC port")

    # 자동 재연결
    def auto_reconnect_tick(self):
        if self.streaming_enabled or self.logging_enabled: return
        if self.ser is None:
            self.try_open_serial(); return
        now = QtCore.QTime.currentTime()
        elapsed = max(0, self.last_rx_time.msecsTo(now))
        if elapsed > 2500:
            try: self.ser.close()
            except Exception: pass
            self.ser = None
            self.try_open_serial()

    def start_reader_thread(self):
        self.reader_stop.clear()
        self.reader_thread = threading.Thread(target=self.reader_loop, daemon=True)
        self.reader_thread.start()

    # ----- 수신 루프 -----
    def reader_loop(self):
        buf = bytearray()
        while not self.reader_stop.is_set():
            if self.ser is None:
                QtCore.QThread.msleep(200); continue
            try:
                chunk = self.ser.read(4096)
                if chunk:
                    self.last_rx_time = QtCore.QTime.currentTime()
                    buf += chunk
                    if PREFER_BINARY:
                        consumed = self.try_parse_frames(buf)
                        if consumed > 0:
                            del buf[:consumed]; continue
                    consumed = self.try_parse_csv_lines(buf)
                    if consumed > 0:
                        del buf[:consumed]; continue
                    if len(buf) > 8192:
                        drop = self.resync_to_magic(buf)
                        if drop > 0: del buf[:drop]
            except Exception:
                pass

    # ----- Binary 파싱 -----
    def try_parse_frames(self, buf: bytearray) -> int:
        i = 0; consumed_total = 0
        while True:
            if len(buf) - i < FRAME_HDR_SIZE: break
            magic = buf[i] | (buf[i+1] << 8)
            if magic != FRAME_MAGIC:
                i += 1; continue
            try:
                (magic_le, seq, payload_len, ch_mask, flags) = struct.unpack_from(FRAME_HDR_FMT, buf, i)
            except struct.error:
                break
            frame_len = FRAME_HDR_SIZE + payload_len
            if len(buf) - i < frame_len: break
            payload = memoryview(buf)[i+FRAME_HDR_SIZE : i+FRAME_HDR_SIZE+payload_len]

            if self.last_seq is not None:
                expected = (self.last_seq + 1) & 0xFFFF
                missed = (seq - expected) & 0xFFFF
                if missed != 0:
                    with self.rate_lock:
                        self.lost_packets += missed
                        self.loss_since_last += missed
                    if PRINT_TO_CONSOLE:
                        print(f"[LOSS] missed {missed} pkt(s): last={self.last_seq}, got={seq}", flush=True)
            self.last_seq = seq
            self.total_packets += 1
            with self.rate_lock:
                self.frames_since_last += 1

            if flags & FLAG_ASCII_PAYLOAD:
                try:
                    line = bytes(payload).decode(errors="ignore").strip()
                    self.handle_ascii_line(line)
                except Exception:
                    with self.rate_lock:
                        self.malformed_lines += 1
                        self.malformed_since_last += 1
            else:
                try:
                    cnt = payload_len // 2
                    arr = np.frombuffer(payload, dtype='<i2', count=cnt)
                    ch_list = [idx for idx in range(4) if (ch_mask >> idx) & 0x1] or [0,1,2,3]
                    n_ch = len(ch_list)
                    blk = (cnt // n_ch) * n_ch
                    if blk != cnt: arr = arr[:blk]
                    samples = blk // n_ch
                    arr = arr.reshape(samples, n_ch)
                    self.last_spp = cnt                 # 프레임당 int16 총 개수
                    self.last_n_ch = max(1, n_ch)       # 활성 채널 수
                    self.handle_block(None, arr, n_ch, ch_list)
                except Exception:
                    with self.rate_lock:
                        self.malformed_lines += 1
                        self.malformed_since_last += 1

            i += frame_len
            consumed_total = i
        return consumed_total

    # ----- CSV 파싱 (하위호환) -----
    def try_parse_csv_lines(self, buf: bytearray) -> int:
        try:
            data = bytes(buf); nl_pos = data.find(b'\n')
            if nl_pos < 0: return 0
            line = data[:nl_pos+1].decode(errors="ignore").strip()
        except Exception:
            return 0

        if '*' in line: line = line.split('*', 1)[0].strip()
        if "," not in line: return nl_pos + 1

        parts = [p.strip() for p in line.split(",")]
        seq = None; values = None
        try:
            if len(parts) == 5:
                seq = int(parts[0]); values = [int(x) for x in parts[1:]]
            elif len(parts) == 4:
                values = [int(x) for x in parts]
            else:
                with self.rate_lock:
                    self.malformed_lines += 1; self.malformed_since_last += 1
        except ValueError:
            with self.rate_lock:
                self.malformed_lines += 1; self.malformed_since_last += 1
            return nl_pos + 1

        if values and len(values) == 4:
            arr = np.array(values, dtype=np.int16).reshape(1, 4)
            self.handle_block(seq, arr, 4, [0,1,2,3])
            self.last_spp = 4
            self.last_n_ch = 4
            self.total_packets += 1
            with self.rate_lock:
                self.frames_since_last += 1
        return nl_pos + 1

    def resync_to_magic(self, buf: bytearray) -> int:
        for idx in range(max(0, len(buf) - 2048)):
            if idx + 1 < len(buf):
                if (buf[idx] | (buf[idx+1] << 8)) == FRAME_MAGIC:
                    return idx
        return len(buf) // 2

    # ----- 블록 처리 -----
    def handle_block(self, seq, arr_i16: np.ndarray, n_ch: int, ch_list):
        if arr_i16.size == 0: return

        if len(ch_list) != 4:
            full = np.zeros((arr_i16.shape[0], 4), dtype=np.int16)
            for k, ch in enumerate(ch_list):
                full[:, ch] = arr_i16[:, k]
            arr4 = full
        else:
            arr4 = arr_i16

        samples = arr4.shape[0]

        if self.streaming_enabled:
            cols = [arr4[:, i].tolist() for i in range(4)]
            for i in range(4):
                self.data_queues[i].extend(cols[i])

            if self.logging_enabled and self.csv_writer:
                if seq is not None:
                    seq_col = np.full((samples, 1), seq, dtype=object)
                else:
                    seq_col = np.full((samples, 1), "", dtype=object)
                rows = np.hstack([seq_col, arr4.astype(object)]).tolist()
                self.csv_writer.writerows(rows)

            # 가상 시간 누적: 현재 추정된 per-ch sps로 증가
            per_ch = max(1e-9, self.per_ch_sps_est)
            self.t_virtual += samples / per_ch

        # 프레임 간격 기반 gap 검출(유지)
        now = QtCore.QTime.currentTime()
        if self.last_time is not None:
            dt_ms = self.last_time.msecsTo(now)
            if dt_ms >= 0:
                self.dt_history.append(dt_ms)
                if len(self.dt_history) >= 20:
                    median_dt = sorted(self.dt_history)[len(self.dt_history)//2]
                    threshold = max(10, 3 * median_dt)
                    if dt_ms > threshold:
                        with self.rate_lock:
                            self.gap_count += 1
                            self.gaps_since_last += 1
                        if PRINT_TO_CONSOLE:
                            print(f"[GAP] dt={dt_ms}ms (>~{threshold})", flush=True)
        self.last_time = now

    # ----- ASCII (옵션) -----
    def handle_ascii_line(self, line: str):
        if not line: return
        if PRINT_TO_CONSOLE: print(f"[ASCII] {line}", flush=True)

    # ----- 상태바 & 샘플레이트 자동보정 -----
    def update_statusbar_stats(self):
        now = QtCore.QTime.currentTime()
        dt_s = max(0.001, self.prev_stats_time.msecsTo(now) / 1000.0)
        with self.rate_lock:
            delta_frames = self.frames_since_last; self.frames_since_last = 0
            delta_loss = self.loss_since_last; self.loss_since_last = 0
            delta_malformed = self.malformed_since_last; self.malformed_since_last = 0
            delta_gaps = self.gaps_since_last; self.gaps_since_last = 0

        rx_fps = delta_frames / dt_s
        total_int16_per_s = rx_fps * max(1, self.last_spp)              # 전체 int16/s
        per_ch_sps_curr = total_int16_per_s / max(1, self.last_n_ch)    # 채널당 sps 추정

        # EMA로 부드럽게 추정치 업데이트
        self.per_ch_sps_est = (
            (1.0 - self.per_ch_sps_alpha) * self.per_ch_sps_est
            + self.per_ch_sps_alpha * per_ch_sps_curr
        )

        achieve = (total_int16_per_s / TARGET_TOTAL_SPS * 100.0) if TARGET_TOTAL_SPS > 0 else 0.0
        loss_per_s = delta_loss / dt_s
        malformed_per_s = delta_malformed / dt_s
        gaps_per_s = delta_gaps / dt_s
        mode = "BIN→CSV" if PREFER_BINARY else "CSV only"

        self.status.showMessage(
            f"mode={mode} | pkt={self.total_packets}  |  "
            f"rx≈{rx_fps:,.1f} fps  sps(all)≈{total_int16_per_s:,.1f}  per-ch(est)≈{self.per_ch_sps_est:,.1f}  |  "
            f"loss/s≈{loss_per_s:.2f}  malformed/s≈{malformed_per_s:.2f}  gaps/s≈{gaps_per_s:.2f}  |  "
            f"target(16k)≈{achieve:,.1f}%"
        )
        self.prev_stats_time = now

    # ----- 버튼 -----
    def start_logging(self):
        if self.ser is None:
            self.try_open_serial()
            if self.ser is None:
                QtWidgets.QMessageBox.warning(self, "Serial", "Serial open failed.")
                return
        if not self.logging_enabled:
            self.total_packets = self.lost_packets = self.malformed_lines = self.gap_count = 0
            self.last_seq = None; self.last_time = None; self.dt_history.clear()
            with self.rate_lock:
                self.frames_since_last = 0
                self.loss_since_last = self.malformed_since_last = self.gaps_since_last = 0

            # 가상 시간 리셋
            self.t_virtual = 0.0

            try:
                self.ser.reset_input_buffer(); self.ser.reset_output_buffer()
            except Exception: pass

            filename = f"adc_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            self.last_csv_filename = filename
            try:
                self.csv_file = open(filename, mode="w", newline="")
                self.csv_writer = csv.writer(self.csv_file)
                self.csv_writer.writerow(["SEQ", "CH1", "CH2", "CH3", "CH4"])
            except Exception as e:
                QtWidgets.QMessageBox.warning(self, "CSV", f"Failed to open CSV: {e}")
                return

            self.csv_flush_timer = QtCore.QTimer(self)
            self.csv_flush_timer.timeout.connect(lambda: (self.csv_file and self.csv_file.flush()))
            self.csv_flush_timer.start(1000)

            self.logging_enabled = True
            self.streaming_enabled = True
            try: self.ser.write(b"on\n")
            except Exception: pass
            self.status.showMessage(f"🟢 Logging started → {filename}")

    def stop_logging(self):
        if self.logging_enabled:
            try:
                if self.ser: self.ser.write(b"off\n")
            except Exception: pass
        self.logging_enabled = False
        self.streaming_enabled = False
        try:
            if self.csv_flush_timer: self.csv_flush_timer.stop(); self.csv_flush_timer = None
            if self.csv_file: self.csv_file.flush(); self.csv_file.close()
        finally:
            self.csv_file = None; self.csv_writer = None
        self.status.showMessage("🛑 Logging stopped. CSV file closed.")

    def send_stimulus(self):
        pulses = self.pulse_edit.text().strip()
        period = self.period_edit.text().strip()
        duty   = self.duty_edit.text().strip()
        if not (pulses.isdigit() and period.isdigit() and duty.isdigit()):
            QtWidgets.QMessageBox.warning(self, "Stim", "Invalid input. Use integers."); return
        cmd = f"{pulses},{period},{duty}\n".encode()
        try:
            if self.ser is None: self.try_open_serial()
            if self.ser:
                self.ser.write(cmd)
                self.status.showMessage(f"📤 Sent stimulus: {pulses},{period},{duty}")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Serial", f"Write failed: {e}")

    def toggle_channel(self, idx, state):
        self.channel_visible[idx] = (state == QtCore.Qt.Checked)

    def open_csv(self):
        if self.last_csv_filename and os.path.exists(self.last_csv_filename):
            try: os.startfile(self.last_csv_filename)
            except AttributeError:
                import subprocess; opener = "open" if sys.platform == "darwin" else "xdg-open"
                subprocess.call([opener, self.last_csv_filename])
        else:
            QtWidgets.QMessageBox.information(self, "CSV", "No CSV file to open.")

    # ----- 그래프 -----
    def create_split_plots(self):
        self.graphics.clear()
        self.plots, self.curves = [], []
        for i in range(4):
            p = self.graphics.addPlot(row=i, col=0)
            p.showGrid(x=True, y=True)
            p.setLabel("left", f"CH{i+1}", units="mV")
            if i == 3:
                p.setLabel("bottom", "Time", units="s")
            p.setYRange(Y_MIN, Y_MAX)
            p.setMouseEnabled(x=True, y=True)
            # ★ 점만 표시: pen=None, symbol='o'
            curve = p.plot([], [], pen=None, symbol='o', symbolSize=4, symbolBrush=CHANNEL_COLORS[i])
            curve.setClipToView(True)
            try: curve.setDownsampling(auto=False, method=None)
            except Exception: pass
            try: curve.setDecimate(False)
            except Exception: pass
            self.plots.append(p); self.curves.append(curve)

    def toggle_merge_split(self):
        self.graphics.clear()
        if not self.merged:
            p = self.graphics.addPlot(row=0, col=0)
            p.showGrid(x=True, y=True)
            p.setLabel("left", "Voltage", units="mV")
            p.setLabel("bottom", "Time", units="s")
            p.setYRange(Y_MIN, Y_MAX)
            p.setMouseEnabled(x=True, y=True)
            self.curves = []
            for i in range(4):
                curve = p.plot([], [], pen=None, symbol='o', symbolSize=4, symbolBrush=CHANNEL_COLORS[i], name=f"CH{i+1}")
                curve.setClipToView(True)
                try: curve.setDownsampling(auto=False, method=None)
                except Exception: pass
                try: curve.setDecimate(False)
                except Exception: pass
                self.curves.append(curve)
            self.merged = True; self.btn_merge_split.setText("Split")
        else:
            self.create_split_plots()
            self.merged = False; self.btn_merge_split.setText("Merge")

    def reset_view(self):
        # 최근 MAX_POINTS 구간의 가상 시간 범위로 설정
        per_ch = max(1e-9, self.per_ch_sps_est)
        t_end = self.t_virtual
        t_start = max(0.0, t_end - (MAX_POINTS - 1) / per_ch)
        if self.merged:
            if self.curves:
                vb = self.curves[0].getViewBox()
                vb.setXRange(t_start, t_end); vb.setYRange(Y_MIN, Y_MAX)
        else:
            for c in self.curves:
                vb = c.getViewBox()
                vb.setXRange(t_start, t_end); vb.setYRange(Y_MIN, Y_MAX)
        self.status.showMessage("🔄 View reset")

    def update_plot(self):
        # x축 = 가상 시간: 간격(1 / per_ch_sps_est)으로 증가
        per_ch = max(1e-9, self.per_ch_sps_est)
        t_end = self.t_virtual
        for i in range(len(self.curves)):
            if not self.channel_visible[i]:
                self.curves[i].setData([], []); continue
            dq = self.data_queues[i]
            n = len(dq)
            if n:
                y = np.fromiter(dq, dtype=np.int16, count=n)
                t_start = max(0.0, t_end - (n - 1) / per_ch)
                x = np.linspace(t_start, t_end, n, dtype=np.float64)
                # 선 없이 점만
                self.curves[i].setData(x, y)
            else:
                self.curves[i].setData([], [])

    # ----- 종료 -----
    def cleanup(self):
        self.reader_stop.set()
        if self.reader_thread and self.reader_thread.is_alive():
            try: self.reader_thread.join(timeout=1.0)
            except Exception: pass
        if self.csv_flush_timer:
            try: self.csv_flush_timer.stop()
            except Exception: pass
        if self.csv_file:
            try: self.csv_file.flush(); self.csv_file.close()
            except Exception: pass
        if self.ser:
            try: self.ser.close()
            except Exception: pass


def main():
    app = QtWidgets.QApplication(sys.argv)
    # 전역 downsample 옵션은 구버전에 없음 → 제외
    pg.setConfigOptions(antialias=True, useOpenGL=False)
    win = MainWindow(); win.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
