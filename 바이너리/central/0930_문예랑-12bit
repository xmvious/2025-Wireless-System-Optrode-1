/*
 * Copyright (c) 2018 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

/** @file
 *  @brief Nordic UART Service Client sample (Binary + Framing enabled)
 *
 *  원본 기능 유지:
 *   - 스캔 → 연결 → NUS 서비스 디스커버리 → Notification 구독
 *   - UART(PC) ←→ BLE(NUS) 양방향 브리지
 *   - UART 비동기 수신(타임아웃/임계값 기반), BLE 전송은 MTU 기반 청크 분할 + sent 대기
 *
 *  추가/정합:
 *   - (정합) FLAG_PACKED12(0x02) 정의만 포함(브리지이므로 해석/언패킹은 하지 않음; 그대로 패스)
 *   - 연결 직후 MTU 교환, DLE 251, 2M PHY 요청, 짧은 conn interval(7.5~15ms) 유지
 *   - 실제 att_mtu 기반 nus_max_chunk() 반영/로그 유지
 *   - UART 보레이트 로그(속도 불일치 조기 확인) 유지
 */

#include <errno.h>
#include <inttypes.h>
#include <string.h>

#include <zephyr/kernel.h>
#include <zephyr/device.h>
#include <zephyr/devicetree.h>
#include <zephyr/sys/byteorder.h>
#include <zephyr/sys/printk.h>
#include <zephyr/sys/util.h>           /* MIN/MAX */

#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/hci.h>
#include <zephyr/bluetooth/conn.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/gatt.h>

#include <bluetooth/services/nus.h>
#include <bluetooth/services/nus_client.h>
#include <bluetooth/gatt_dm.h>
#include <bluetooth/scan.h>

#include <zephyr/settings/settings.h>
#include <zephyr/drivers/uart.h>
#include <zephyr/logging/log.h>
#include <dk_buttons_and_leds.h>

#define LOG_MODULE_NAME central_uart
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

/* =====================[ 공통 프레임 상수/정의 ]===================== */
#define FRAME_MAGIC            0xA5C3
#define DEFAULT_CH_MASK        0x0F
#define FLAG_ASCII_PAYLOAD     0x01
#define FLAG_PACKED12          0x02  /* 퍼리 정합용: 12-bit packed payload 표시(중앙은 패스스루) */

/* MTU (연결 후 갱신) */
static uint16_t att_mtu = 23;
static inline uint16_t nus_max_chunk(void) { return (att_mtu > 3) ? (att_mtu - 3) : 20; }

/* UART payload buffer */
#define UART_BUF_SIZE           512
#define NUS_WRITE_TIMEOUT       K_MSEC(150)
#define UART_WAIT_FOR_BUF_DELAY K_MSEC(50)
/* RX 타임아웃(us): 드라이버가 조각을 밀어주는 한계 */
#define UART_RX_TIMEOUT         50000
/* 버퍼가 너무 커지면 flush */
#define UART_FLUSH_THRESHOLD    (UART_BUF_SIZE - 16)

/* =====================[ 전역 ]===================== */

struct uart_data_t {
    void   *fifo_reserved;
    uint8_t data[UART_BUF_SIZE];
    uint16_t len;
};

static const struct device *uart = DEVICE_DT_GET(DT_CHOSEN(nordic_nus_uart));
static struct k_work_delayable uart_work;
static struct k_work ble_send_work;           /* (레거시 경로 유지) */
static struct uart_data_t *pending_buf;       /* (레거시 경로 유지) */

K_SEM_DEFINE(nus_write_sem, 0, 1);
static K_FIFO_DEFINE(fifo_uart_tx_data);
static K_FIFO_DEFINE(fifo_uart_rx_data);

static struct bt_conn *default_conn;
static struct bt_nus_client nus_client;

/* (참고) 프레임 헤더: 현재 RAW 브리지이므로 사용 안 함(그대로 전달) */
typedef struct __packed {
    uint16_t magic;        /* 0xA5C3 */
    uint16_t seq;          /* 증가 시퀀스 (LE) */
    uint16_t payload_len;  /* 뒤따르는 payload 바이트 수 (LE) */
    uint8_t  ch_mask;      /* 사용 채널 비트마스크 */
    uint8_t  flags;        /* bit0: ASCII, bit1: PACKED12 */
} frame_hdr_t;

static uint16_t g_seq = 0;

/* 연결 후 링크 업그레이드(DLE/PHY/conn param) */
static void request_link_upgrades(struct bt_conn *conn)
{
    if (!conn) return;

#if defined(CONFIG_BT_DATA_LEN_UPDATE)
    const struct bt_conn_le_data_len_param dlen = {
        .tx_max_len  = 251,
        .tx_max_time = 2120,
    };
    int err_dle = bt_conn_le_data_len_update(conn, &dlen);
    if (err_dle) {
        LOG_WRN("DLE request failed: %d", err_dle);
    } else {
        LOG_INF("DLE requested (251/2120)");
    }
#endif

#if defined(CONFIG_BT_PHY_UPDATE)
    struct bt_conn_le_phy_param phy = {
        .pref_tx_phy = BT_GAP_LE_PHY_2M,
        .pref_rx_phy = BT_GAP_LE_PHY_2M,
    };
    int err_phy = bt_conn_le_phy_update(conn, &phy);
    if (err_phy) {
        LOG_WRN("PHY update request failed: %d", err_phy);
    } else {
        LOG_INF("PHY 2M requested");
    }
#endif

    struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 12, 0, 400); /* 7.5~15ms */
    int err_cp = bt_conn_le_param_update(conn, param);
    if (err_cp) {
        LOG_WRN("Conn param update failed: %d", err_cp);
    } else {
        LOG_INF("Conn param update requested (6-12*1.25ms)");
    }
}

/* =====================[ BLE 전송 완료 콜백 ]===================== */

static void ble_data_sent(struct bt_nus_client *nus, uint8_t err,
                          const uint8_t *const data, uint16_t len)
{
    ARG_UNUSED(nus);
    ARG_UNUSED(data);
    ARG_UNUSED(len);

    k_sem_give(&nus_write_sem);

    if (err) {
        LOG_WRN("ATT error code: 0x%02X", err);
    }
}

/* =====================[ BLE 수신 → UART ]===================== */

static uint8_t ble_data_received(struct bt_nus_client *nus,
                                 const uint8_t *data, uint16_t len)
{
    ARG_UNUSED(nus);

    /* 브리지: BLE로 받은 것을 그대로 UART로 토해낸다(패스스루). */
    for (uint16_t pos = 0; pos < len; ) {
        struct uart_data_t *tx = k_malloc(sizeof(*tx));
        if (!tx) {
            LOG_WRN("UART send buffer alloc failed");
            return BT_GATT_ITER_CONTINUE;
        }

        size_t n = MIN(sizeof(tx->data), (size_t)(len - pos));
        memcpy(tx->data, &data[pos], n);
        tx->len = (uint16_t)n;
        pos += n;

        int err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
        if (err) {
            LOG_WRN("uart_tx failed (%d), enqueueing", err);
            k_fifo_put(&fifo_uart_tx_data, tx);
        } else {
            /* free는 UART_TX_DONE에서 */
        }
    }

    return BT_GATT_ITER_CONTINUE;
}

/* =====================[ UART 콜백 ]===================== */

static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    ARG_UNUSED(dev);
    ARG_UNUSED(user_data);

    static size_t aborted_len;
    static uint8_t *aborted_buf;
    static bool disable_req;
    struct uart_data_t *buf;

    switch (evt->type) {
    case UART_TX_DONE:
        if ((evt->data.tx.len == 0) || (!evt->data.tx.buf)) return;

        if (aborted_buf) {
            buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
            aborted_buf = NULL;
            aborted_len = 0;
        } else {
            buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data[0]);
        }
        k_free(buf);

        buf = k_fifo_get(&fifo_uart_tx_data, K_NO_WAIT);
        if (buf) {
            if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
                LOG_WRN("Failed to send data over UART");
            }
        }
        break;

    case UART_TX_ABORTED:
        if (!aborted_buf) {
            aborted_buf = (uint8_t *)evt->data.tx.buf;
        }
        aborted_len += evt->data.tx.len;
        buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
        uart_tx(uart, &buf->data[aborted_len], buf->len - aborted_len, SYS_FOREVER_MS);
        break;

    case UART_RX_RDY:
        buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data[0]);
        /* offset부터 len만큼 버퍼 끝에 붙이기 */
        if (buf->len < sizeof(buf->data)) {
            size_t space_left = sizeof(buf->data) - buf->len;
            size_t to_copy = MIN(space_left, (size_t)evt->data.rx.len);
            memcpy(&buf->data[buf->len],
                   &evt->data.rx.buf[evt->data.rx.offset],
                   to_copy);
            buf->len += to_copy;
        }

        if (!disable_req && buf->len >= UART_FLUSH_THRESHOLD) {
            disable_req = true;
            uart_rx_disable(uart);
        }
        break;

    case UART_RX_DISABLED:
        disable_req = false;

        /* 새 버퍼로 다시 수신 시작 */
        buf = k_malloc(sizeof(*buf));
        if (!buf) {
            LOG_WRN("Not able to allocate UART receive buffer");
            k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
            return;
        }
        buf->len = 0;
        uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
        break;

    case UART_RX_BUF_REQUEST:
        buf = k_malloc(sizeof(*buf));
        if (buf) {
            buf->len = 0;
            uart_rx_buf_rsp(uart, buf->data, sizeof(buf->data));
        } else {
            LOG_WRN("Not able to allocate UART receive buffer");
        }
        break;

    case UART_RX_BUF_RELEASED:
        buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data[0]);
        if (buf->len > 0) {
            k_fifo_put(&fifo_uart_rx_data, buf); /* 메인 루프에서 BLE 전송 */
        } else {
            k_free(buf);
        }
        break;

    default:
        break;
    }
}

/* =====================[ BLE 전송 (MTU 기반 분할) ]===================== */

static int nus_send_chunked(const uint8_t *p, uint16_t len)
{
    while (len) {
        uint16_t n = MIN(nus_max_chunk(), len);
        int err = bt_nus_client_send(&nus_client, p, n);
        if (err) return err;

        int s = k_sem_take(&nus_write_sem, NUS_WRITE_TIMEOUT);
        if (s) LOG_WRN("NUS send timeout");

        p   += n;
        len -= n;
    }
    return 0;
}

/* =====================[ (레거시) 워크 핸들러 유지 ]===================== */
static void ble_send_work_handler(struct k_work *w)
{
    ARG_UNUSED(w);
    if (!default_conn || !pending_buf) return;

    int send_ret = nus_send_chunked(pending_buf->data, pending_buf->len);
    if (send_ret) {
        LOG_ERR("Failed to send to peripheral (err %d)", send_ret);
    } else {
        LOG_INF("Sent %u bytes (legacy path)", pending_buf->len);
    }
    k_free(pending_buf);
    pending_buf = NULL;
}

/* =====================[ UART init ]===================== */

static void uart_work_handler(struct k_work *item)
{
    ARG_UNUSED(item);
    struct uart_data_t *buf = k_malloc(sizeof(*buf));
    if (!buf) {
        LOG_WRN("Not able to allocate UART receive buffer");
        k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
        return;
    }
    buf->len = 0;
    uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_RX_TIMEOUT);
}

static void log_uart_baudrate(void)
{
    struct uart_config cfg;
    if (!uart_config_get(uart, &cfg)) {
        LOG_INF("UART0 baudrate: %u", cfg.baudrate);
    }
}

static int uart_init(void)
{
    int err;
    struct uart_data_t *rx;

    if (!device_is_ready(uart)) {
        LOG_ERR("UART device not ready");
        return -ENODEV;
    }

    rx = k_malloc(sizeof(*rx));
    if (!rx) return -ENOMEM;
    rx->len = 0;

    k_work_init_delayable(&uart_work, uart_work_handler);

    err = uart_callback_set(uart, uart_cb, NULL);
    if (err) return err;

    err = uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_RX_TIMEOUT);
    if (!err) {
        log_uart_baudrate();
    }
    return err;
}

/* =====================[ GATT/NUS discovery ]===================== */

static void discovery_complete(struct bt_gatt_dm *dm, void *context)
{
    struct bt_nus_client *nus = context;
    LOG_INF("Service discovery completed");

    bt_gatt_dm_data_print(dm);
    bt_nus_handles_assign(dm, nus);

    int err = bt_nus_subscribe_receive(nus);
    if (err) {
        LOG_ERR("bt_nus_subscribe_receive() failed (err %d)", err);
    } else {
        LOG_INF("bt_nus_subscribe_receive() successful");
    }

    bt_gatt_dm_data_release(dm);
}

static void discovery_service_not_found(struct bt_conn *conn, void *context)
{
    ARG_UNUSED(conn);
    ARG_UNUSED(context);
    LOG_INF("Service not found");
}

static void discovery_error(struct bt_conn *conn, int err, void *context)
{
    ARG_UNUSED(conn);
    ARG_UNUSED(context);
    LOG_WRN("Error while discovering GATT database: (%d)", err);
}

static struct bt_gatt_dm_cb discovery_cb = {
    .completed         = discovery_complete,
    .service_not_found = discovery_service_not_found,
    .error_found       = discovery_error,
};

static void gatt_discover(struct bt_conn *conn)
{
    if (conn != default_conn) return;

    int err = bt_gatt_dm_start(conn, BT_UUID_NUS_SERVICE, &discovery_cb, &nus_client);
    if (err) {
        LOG_ERR("could not start the discovery procedure, error code: %d", err);
    }
}

/* =====================[ MTU 교환 콜백 ]===================== */

static void exchange_func(struct bt_conn *conn, uint8_t err, struct bt_gatt_exchange_params *params)
{
    ARG_UNUSED(params);
    if (!err) {
        att_mtu = bt_gatt_get_mtu(conn);
        LOG_INF("MTU exchange done: att_mtu=%u, NUS chunk=%u", att_mtu, nus_max_chunk());
    } else {
        LOG_WRN("MTU exchange failed (err %" PRIu8 ")", err);
    }
}

/* =====================[ 연결/해제/보안 콜백 ]===================== */

static void connected(struct bt_conn *conn, uint8_t conn_err)
{
    char addr[BT_ADDR_LE_STR_LEN];

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (conn_err) {
        LOG_INF("Failed to connect to %s, 0x%02x %s", addr, conn_err, bt_hci_err_to_str(conn_err));

        if (default_conn == conn) {
            bt_conn_unref(default_conn);
            default_conn = NULL;

            int err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
            if (err) LOG_ERR("Scanning failed to start (err %d)", err);
        }
        return;
    }

    LOG_INF("Connected: %s", addr);

    /* MTU 교환 */
    static struct bt_gatt_exchange_params exchange_params;
    exchange_params.func = exchange_func;
    int err = bt_gatt_exchange_mtu(conn, &exchange_params);
    if (err) LOG_WRN("MTU exchange failed (err %d)", err);

    /* 링크 업그레이드 요청(DLE/PHY/conn param) */
    request_link_upgrades(conn);

    /* 서비스 디스커버리 시작 */
    gatt_discover(conn);

    /* 스캔 중지 */
    err = bt_scan_stop();
    if ((!err) && (err != -EALREADY)) {
        LOG_ERR("Stop LE scan failed (err %d)", err);
    }
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    LOG_INF("Disconnected: %s, reason 0x%02x %s", addr, reason, bt_hci_err_to_str(reason));

    if (default_conn != conn) return;

    bt_conn_unref(default_conn);
    default_conn = NULL;

    int err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) LOG_ERR("Scanning failed to start (err %d)", err);
}

static void security_changed(struct bt_conn *conn, bt_security_t level, enum bt_security_err err)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    if (!err) {
        LOG_INF("Security changed: %s level %u", addr, level);
    } else {
        LOG_WRN("Security failed: %s level %u err %d %s", addr, level, err,
                bt_security_err_to_str(err));
    }

    gatt_discover(conn);
}

BT_CONN_CB_DEFINE(conn_callbacks) = {
    .connected = connected,
    .disconnected = disconnected,
    .security_changed = security_changed
};

/* =====================[ 스캔 콜백/초기화 ]===================== */

static void scan_filter_match(struct bt_scan_device_info *device_info,
                              struct bt_scan_filter_match *filter_match,
                              bool connectable)
{
    ARG_UNUSED(filter_match);
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
    LOG_INF("Filters matched. Address: %s connectable: %d", addr, connectable);
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
    ARG_UNUSED(device_info);
    LOG_WRN("Connecting failed");
}

static void scan_connecting(struct bt_scan_device_info *device_info, struct bt_conn *conn)
{
    ARG_UNUSED(device_info);
    default_conn = bt_conn_ref(conn);
}

static int nus_client_init(void)
{
    struct bt_nus_client_init_param init = {
        .cb = {
            .received = ble_data_received,
            .sent     = ble_data_sent,
        }
    };
    int err = bt_nus_client_init(&nus_client, &init);
    if (err) LOG_ERR("NUS Client initialization failed (err %d)", err);
    else     LOG_INF("NUS Client module initialized");
    return err;
}

BT_SCAN_CB_INIT(scan_cb, scan_filter_match, NULL, scan_connecting_error, scan_connecting);

static int scan_init(void)
{
    struct bt_scan_init_param scan_init = {
        .connect_if_match = 1,
    };

    bt_scan_init(&scan_init);
    bt_scan_cb_register(&scan_cb);

    int err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, BT_UUID_NUS_SERVICE);
    if (err) return err;

    err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
    if (err) return err;

    LOG_INF("Scan module initialized");
    return 0;
}

/* =====================[ 페어링 콜백 ]===================== */

static void auth_cancel(struct bt_conn *conn)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing cancelled: %s", addr);
}

static void pairing_complete(struct bt_conn *conn, bool bonded)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_WRN("Pairing failed conn: %s, reason %d %s", addr, reason, bt_security_err_to_str(reason));
}

static struct bt_conn_auth_cb conn_auth_callbacks = {
    .cancel = auth_cancel,
};

static struct bt_conn_auth_info_cb conn_auth_info_callbacks = {
    .pairing_complete = pairing_complete,
    .pairing_failed   = pairing_failed
};

/* =====================[ main() ]===================== */

int main(void)
{
    int err;

    err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    if (err) {
        LOG_ERR("Failed to register authorization callbacks.");
        return 0;
    }

    err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    if (err) {
        printk("Failed to register authorization info callbacks.\n");
        return 0;
    }

    err = bt_enable(NULL);
    if (err) {
        LOG_ERR("Bluetooth init failed (err %d)", err);
        return 0;
    }
    LOG_INF("Bluetooth initialized");

    if (IS_ENABLED(CONFIG_SETTINGS)) {
        settings_load();
    }

    err = uart_init();
    if (err) {
        LOG_ERR("uart_init failed (err %d)", err);
        return 0;
    }

    err = scan_init();
    if (err) {
        LOG_ERR("scan_init failed (err %d)", err);
        return 0;
    }

    err = nus_client_init();
    if (err) {
        LOG_ERR("nus_client_init failed (err %d)", err);
        return 0;
    }

    printk("Starting Bluetooth Central UART (Binary+Frame, PASS-THROUGH, PACKED12-aware)\n");

    k_work_init(&ble_send_work, ble_send_work_handler); /* (레거시 경로 유지) */

    err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
    if (err) {
        LOG_ERR("Scanning failed to start (err %d)", err);
        return 0;
    }
    LOG_INF("Scanning successfully started");

    /* ===== 메인 루프: UART에서 받은 조각을 BLE로 전송 ===== */
    for (;;) {
        struct uart_data_t *buf = k_fifo_get(&fifo_uart_rx_data, K_FOREVER);
        if (buf && buf->len) {
            if (default_conn) {
                int e = nus_send_chunked(buf->data, buf->len);  /* RAW 전송 유지 */
                if (e) {
                    LOG_WRN("nus_send_chunked err=%d (len=%u)", e, buf->len);
                }
            } else {
                LOG_WRN("No BLE connection; dropping %u bytes", buf->len);
            }
        }
        if (buf) k_free(buf);
    }
}
