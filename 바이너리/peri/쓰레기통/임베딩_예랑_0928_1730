/*
 * Copyright (c) 2018 Nordic Semiconductor ASA
 *
 * SPDX-License-Identifier: LicenseRef-Nordic-5-Clause
 */

/** @file
 *  @brief Nordic UART Bridge Service (NUS) sample (Binary + Framing enabled)
 */
#include <zephyr/sys/byteorder.h>  // ★ 추가: sys_cpu_to_le16, sys_le16_to_cpu, sys_put_le16
#include <stdlib.h>                // ★ 추가: atoi

#include <uart_async_adapter.h>

#include <zephyr/types.h>
#include <zephyr/kernel.h>
#include <zephyr/drivers/uart.h>
#include <zephyr/usb/usb_device.h>

#include <zephyr/device.h>
#include <zephyr/devicetree.h>
#include <soc.h>

#include <zephyr/bluetooth/bluetooth.h>
#include <zephyr/bluetooth/uuid.h>
#include <zephyr/bluetooth/gatt.h>
#include <zephyr/bluetooth/hci.h>

#include <bluetooth/services/nus.h>

#include <dk_buttons_and_leds.h>

#include <zephyr/settings/settings.h>

#include <stdio.h>
#include <string.h>

#include <zephyr/logging/log.h>

#include <zephyr/drivers/gpio.h>
#include <hal/nrf_gpio.h>

#include <zephyr/drivers/adc.h>
#include <nrfx_saadc.h>

#include <zephyr/bluetooth/conn.h>   // ★ 추가


/* ============================================================
 *              프로젝트/프레이밍 공통 상수
 * ============================================================*/
#define LOG_MODULE_NAME peripheral_uart
LOG_MODULE_REGISTER(LOG_MODULE_NAME);

/* Frame header (센트럴과 동일) */
#define FRAME_MAGIC             0xA5C3
typedef struct __packed {
    uint16_t magic;        /* 0xA5C3 */
    uint16_t seq;          /* LE */
    uint16_t payload_len;  /* LE */
    uint8_t  ch_mask;      /* ex: 4채널 -> 0b1111 */
    uint8_t  flags;        /* bit0: payload is ASCII command (optional) */
} frame_hdr_t;

#define DEFAULT_CH_MASK         0x0F
#define FLAG_ASCII_PAYLOAD      0x01  /* payload가 ASCII 텍스트임을 알리는 용도(옵션) */

/* ATT MTU (연결 후 갱신), NUS 한 번에 보낼 수 있는 최대 청크 = MTU - 3 */
static uint16_t att_mtu = 23;
static inline uint16_t nus_max_chunk(void) { return (att_mtu > 3) ? (att_mtu - 3) : 20; }

/* ============================================================
 *                       기존 상수/정의
 * ============================================================*/
#define STACKSIZE               CONFIG_BT_NUS_THREAD_STACK_SIZE
#define PRIORITY                7

#define DEVICE_NAME             CONFIG_BT_DEVICE_NAME
#define DEVICE_NAME_LEN         (sizeof(DEVICE_NAME) - 1)

#define RUN_STATUS_LED          DK_LED1
#define RUN_LED_BLINK_INTERVAL  1000
#define CON_STATUS_LED          DK_LED2

#define KEY_PASSKEY_ACCEPT      DK_BTN1_MSK
#define KEY_PASSKEY_REJECT      DK_BTN2_MSK

/* UART buffer는 바이너리 스트림 고려하여 충분히 크게 */
#ifndef CONFIG_BT_NUS_UART_BUFFER_SIZE
#define CONFIG_BT_NUS_UART_BUFFER_SIZE 512
#endif
#define UART_BUF_SIZE           CONFIG_BT_NUS_UART_BUFFER_SIZE
#define UART_WAIT_FOR_BUF_DELAY K_MSEC(50)
/* us 단위: 타임아웃 발생 시 드라이버가 조각을 밀어줌(플랫폼마다 상이) */
#define UART_WAIT_FOR_RX        50000
/* flush 임계값 */
#define UART_FLUSH_THRESHOLD    (UART_BUF_SIZE - 16)

/* GPIO: LED */
#define GPIO_PIN                NRF_GPIO_PIN_MAP(0,3)

/* ADC */
#define ADC_RESOLUTION          12
#define NUM_CHANNELS            4

/* ====== 버스트 샘플링 수(프레임당 채널 샘플 개수) ====== */
/* 기본값은 유지하되, 실제 사용은 adaptive_spf()로 결정됨 */
#define SAMPLES_PER_FRAME       64
#define FRAME_PAYLOAD_INT16     (NUM_CHANNELS * SAMPLES_PER_FRAME)

/* ============================================================
 *                       전역 상태
 * ============================================================*/
struct uart_data_t {
    void    *fifo_reserved;
    uint8_t  data[UART_BUF_SIZE];
    uint16_t len;
};

static struct uart_data_t *pending_buf;
static K_SEM_DEFINE(ble_init_ok, 0, 1);
static struct bt_conn *current_conn;
static struct bt_conn *auth_conn;

/* J-Link CDC UART (boards/app.overlay에서 nordic,nus-uart = &uart0) */
static const struct device *uart = DEVICE_DT_GET(DT_CHOSEN(nordic_nus_uart));
static struct k_work_delayable uart_work;
static struct k_work ble_send_work;

/* ★ 버스트 루프 on/off 플래그 + in-flight 가드 */
static bool adc_loop_on = false;
static bool adc_in_flight = false;   /* 전송/획득 중 중복 방지 */

/* ★ delayable work 로 변경 */
static void read_adc_and_print_all(struct k_work *work);
K_WORK_DELAYABLE_DEFINE(adc_work, read_adc_and_print_all);

static K_FIFO_DEFINE(fifo_uart_tx_data);
static K_FIFO_DEFINE(fifo_uart_rx_data);

static const struct bt_data ad[] = {
    BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),
    BT_DATA(BT_DATA_NAME_COMPLETE, DEVICE_NAME, DEVICE_NAME_LEN),
};

static const struct bt_data sd[] = {
    BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_NUS_VAL),
};

#ifdef CONFIG_UART_ASYNC_ADAPTER
UART_ASYNC_ADAPTER_INST_DEFINE(async_adapter);
#else
#define async_adapter NULL
#endif

/* ATT MTU 조회용 (peripheral 쪽은 교환 콜백 없으니 gatt_get_mtu를 수신 시점 등에서 사용) */
static inline void update_mtu_from_conn(struct bt_conn *conn) {
    if (!conn) return;
    uint16_t m = bt_gatt_get_mtu(conn);
    if (m >= 23) att_mtu = m;
}

/* ★ MTU 기반 SPF 가변 (latency ↓, 적응형) */
static inline int adaptive_spf(void)
{
    update_mtu_from_conn(current_conn);
    if (att_mtu >= 247) return 64;  /* DLE 251 급 */
    if (att_mtu >= 100) return 32;  /* 중간 MTU */
    return 16;                      /* 작은 MTU/초기 */
}

/* ============================================================
 *                       ADC 설정
 * ============================================================*/
static const struct device *adc_dev = DEVICE_DT_GET(DT_NODELABEL(adc));
static int16_t sample_buf[NUM_CHANNELS];

static const uint8_t channel_ids[NUM_CHANNELS] = {2, 4, 5, 6};  /* A2~A5 = AIN2~AIN6 */
static const nrf_saadc_input_t inputs[NUM_CHANNELS] = {
    NRF_SAADC_INPUT_AIN2,
    NRF_SAADC_INPUT_AIN4,
    NRF_SAADC_INPUT_AIN5,
    NRF_SAADC_INPUT_AIN6,
};

static struct adc_channel_cfg adc_cfg; /* 각 채널 셋업 시 재사용 */
static struct adc_sequence sequence = {
    .buffer      = sample_buf,
    .buffer_size = sizeof(sample_buf),
    .resolution  = ADC_RESOLUTION,
};

static int adc_read_4ch(void)
{
    int err;
    uint32_t channels_mask = 0;

    for (int i = 0; i < NUM_CHANNELS; i++) {
        adc_cfg = (struct adc_channel_cfg){
            .gain             = ADC_GAIN_1_6,
            .reference        = ADC_REF_VDD_1_4,
            .acquisition_time = ADC_ACQ_TIME_DEFAULT,
            .channel_id       = channel_ids[i],
#if defined(CONFIG_ADC_NRFX_SAADC)
            .input_positive   = inputs[i],
#endif
        };
        err = adc_channel_setup(adc_dev, &adc_cfg);
        if (err) {
            LOG_ERR("ADC channel setup failed for ch%d (err %d)", i, err);
            return err;
        }
        channels_mask |= BIT(channel_ids[i]);
    }

    sequence.channels = channels_mask;
    err = adc_read(adc_dev, &sequence);
    if (err) {
        LOG_ERR("ADC read error: %d", err);
        return err;
    }
    return 0;
}

/* ============================================================
 *                      NUS 전송 유틸 (청크 분할)
 * ============================================================*/
static K_SEM_DEFINE(nus_write_sem, 0, 1);

static void nus_sent_cb(struct bt_conn *conn)
{
    ARG_UNUSED(conn);
    k_sem_give(&nus_write_sem);
}

static int nus_send_chunked(const uint8_t *p, uint16_t len)
{
    while (len) {
        uint16_t n = MIN(nus_max_chunk(), len);
        int err = bt_nus_send(current_conn, p, n);
        if (err) return err;

        /* ★ 변경: 실제 전송 완료까지 대기 → 과도 생산 방지(정확한 페이싱) */
        if (k_sem_take(&nus_write_sem, K_SECONDS(1)) != 0) {
            LOG_WRN("NUS send wait timeout");
        }

        p   += n;
        len -= n;
    }
    return 0;
}

static int send_frame_over_nus(const uint8_t *payload, uint16_t payload_len,
                               uint8_t ch_mask, uint8_t flags)
{
    if (!current_conn) return -ENOTCONN;

    const uint16_t total = sizeof(frame_hdr_t) + payload_len;
    uint8_t *frame = k_malloc(total);
    if (!frame) return -ENOMEM;

    static uint16_t seq = 0;
    frame_hdr_t hdr;
    hdr.magic       = sys_cpu_to_le16(FRAME_MAGIC);
    hdr.seq         = sys_cpu_to_le16(seq++);
    hdr.payload_len = sys_cpu_to_le16(payload_len);
    hdr.ch_mask     = ch_mask;
    hdr.flags       = flags;

    memcpy(frame, &hdr, sizeof(hdr));
    memcpy(frame + sizeof(hdr), payload, payload_len);

    update_mtu_from_conn(current_conn);
    int err = nus_send_chunked(frame, total);
    k_free(frame);
    return err;
}

/* ============================================================
 *                  버스트 샘플링(폴링) → 프레임 전송
 * ============================================================*/
static void schedule_next_adc(void); /* forward */

static void read_adc_and_print_all(struct k_work *work)
{
    ARG_UNUSED(work);

    if (!adc_loop_on) return;

    /* ★ 추가: in-flight 가드 (중복 버스트 방지) */
    if (adc_in_flight) { schedule_next_adc(); return; }
    adc_in_flight = true;

    /* ★ 가변 SPF */
    const int SPF = adaptive_spf();
    const int TOTAL_I16 = NUM_CHANNELS * SPF;

    /* 버스트 버퍼: [ch0,ch1,ch2,ch3] 순으로 인터리브 */
    int16_t burst_stack[NUM_CHANNELS * 64]; /* 최대 크기(64spf)만큼 여유 */
    int16_t *burst = burst_stack;

    for (int n = 0; n < SPF; n++) {
        if (adc_read_4ch() != 0) {
            LOG_WRN("ADC read failed in burst");
            adc_in_flight = false;
            schedule_next_adc();
            return;
        }
        for (int ch = 0; ch < NUM_CHANNELS; ch++) {
            burst[n * NUM_CHANNELS + ch] = sample_buf[ch];
        }
    }

    /* payload 직렬화(LE16) */
    uint8_t payload[TOTAL_I16 * 2];
    for (int i = 0; i < TOTAL_I16; i++) {
        sys_put_le16((uint16_t)burst[i], &payload[i * 2]);
    }

    int e = send_frame_over_nus(payload, sizeof(payload), DEFAULT_CH_MASK, 0x00);
    if (e) LOG_WRN("send_frame_over_nus err=%d", e);

    /* ★ 전송 끝: in-flight 해제 후 다음 예약(아주 짧은 유예) */
    adc_in_flight = false;
    schedule_next_adc();
}

/* ★ delayable 재스케줄 */
static void schedule_next_adc(void)
{
    if (!adc_loop_on) return;
    /* 링크 소화시간을 아주 짧게 제공 (필요시 0~2ms 범위 조절) */
    k_work_reschedule(&adc_work, K_USEC(500));
}

/* ============================================================
 *                 BLE 수신 → 프레임 언프레임/하위호환
 * ============================================================*/
static void handle_ascii_command(const char *received_string)
{
    /* 기존 on/off, pulse,period,duty 파싱 로직 유지 */
    nrf_gpio_cfg_output(GPIO_PIN);

    if (strchr(received_string, ',') != NULL) {
        int pulse = 0, period = 0, duty = 0;
        char buf[128];
        size_t n = MIN(sizeof(buf)-1, strlen(received_string));
        memcpy(buf, received_string, n); buf[n] = '\0';

        char *token = strtok(buf, ",");
        if (token) { pulse = atoi(token); token = strtok(NULL, ","); }
        if (token) { period = atoi(token); token = strtok(NULL, ","); }
        if (token) { duty = atoi(token); }

        const float unit = 0.3125f;
        int on_ms  = (int)(duty * unit);
        int off_ms = (int)((period - duty) * unit);
        for (int i=0; i<pulse; i++) {
            nrf_gpio_pin_write(GPIO_PIN, 1);
            k_msleep(on_ms);
            nrf_gpio_pin_write(GPIO_PIN, 0);
            k_msleep(off_ms);
        }
        return;
    }

    /* === on/off: 타이머 대신 버스트 루프 on/off === */
    if (strcmp(received_string, "on\n") == 0 || strcmp(received_string, "on") == 0) {
        if (!adc_loop_on) {
            adc_loop_on = true;
            if (!adc_in_flight) k_work_reschedule(&adc_work, K_NO_WAIT);
            printk("[PERIPHERAL] ADC burst loop started.\n");
        }
    } else if (strcmp(received_string, "off\n") == 0 || strcmp(received_string, "off") == 0) {
        adc_loop_on = false;
        printk("[PERIPHERAL] ADC burst loop stopped.\n");
    }
}

static void handle_payload_to_uart(const uint8_t *data, uint16_t len)
{
    /* 바이너리 그대로 UART로 내보냄 (개행 X) */
    for (uint16_t pos = 0; pos < len; ) {
        struct uart_data_t *tx = k_malloc(sizeof(*tx));
        if (!tx) { LOG_WRN("UART tx alloc fail"); return; }
        size_t n = MIN(sizeof(tx->data), (size_t)(len - pos));
        memcpy(tx->data, &data[pos], n);
        tx->len = (uint16_t)n;
        pos += n;
        int err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
        if (err) {
            k_fifo_put(&fifo_uart_tx_data, tx);
        } else {
            /* free는 TX_DONE에서 */
        }
    }
}

static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data, uint16_t len)
{
    update_mtu_from_conn(conn);

    /* 1) 프레임인지 검사 */
    if (len >= sizeof(frame_hdr_t)) {
        frame_hdr_t hdr;
        memcpy(&hdr, data, sizeof(hdr));
        uint16_t magic = sys_le16_to_cpu(hdr.magic);
        uint16_t plen  = sys_le16_to_cpu(hdr.payload_len);
        if (magic == FRAME_MAGIC && (sizeof(hdr) + plen) <= len) {
            const uint8_t *payload = data + sizeof(hdr);
            /* flags bit0가 1이면 payload를 ASCII 명령으로 취급(하위호환/옵션) */
            if (hdr.flags & FLAG_ASCII_PAYLOAD) {
                char tmp[256];
                size_t n = MIN(sizeof(tmp)-1, (size_t)plen);
                memcpy(tmp, payload, n); tmp[n] = '\0';
                handle_ascii_command(tmp);
            } else {
                /* 일반 바이너리 payload: UART로 흘림 (필요시 별도 해석 추가 가능) */
                handle_payload_to_uart(payload, plen);
            }
            return;
        }
    }

    /* 2) 프레임이 아니면: 예전 텍스트 프로토콜 하위호환 */
    char received_string[256];
    size_t n = MIN(sizeof(received_string)-1, (size_t)len);
    memcpy(received_string, data, n);
    received_string[n] = '\0';
    handle_ascii_command(received_string);
}

/* NUS 콜백 */
static struct bt_nus_cb nus_cb = {
    .received = bt_receive_cb,
    .sent     = nus_sent_cb,   /* ★ 전송 완료 콜백 등록 */
};

/* ============================================================
 *             UART 콜백 (개행 의존 제거, 임계치/타임아웃 flush)
 * ============================================================*/
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
    ARG_UNUSED(dev); ARG_UNUSED(user_data);

    static struct uart_data_t *rx_buf = NULL;
    static bool disable_req;
    static uint8_t *aborted_buf;
    static size_t aborted_len;
    struct uart_data_t *tx_buf;

    switch (evt->type) {
    case UART_TX_DONE:
        if (!evt->data.tx.len || !evt->data.tx.buf) return;
        tx_buf = aborted_buf
               ? CONTAINER_OF(aborted_buf, struct uart_data_t, data[0])
               : CONTAINER_OF(evt->data.tx.buf, struct uart_data_t, data[0]);
        k_free(tx_buf);
        aborted_buf = NULL;
        aborted_len = 0;

        tx_buf = k_fifo_get(&fifo_uart_tx_data, K_NO_WAIT);
        if (tx_buf) {
            if (uart_tx(uart, tx_buf->data, tx_buf->len, SYS_FOREVER_MS)) {
                LOG_WRN("uart_tx failed on FIFO buf");
            }
        }
        break;

    case UART_TX_ABORTED:
        if (!aborted_buf) {
            aborted_buf = (uint8_t *)evt->data.tx.buf;
            aborted_len = 0;
        }
        aborted_len += evt->data.tx.len;
        tx_buf = CONTAINER_OF(aborted_buf, struct uart_data_t, data[0]);
        uart_tx(uart, &tx_buf->data[aborted_len], tx_buf->len - aborted_len, SYS_FOREVER_MS);
        break;

    case UART_RX_RDY:
        if (!rx_buf) return;
        {
            size_t space_left = sizeof(rx_buf->data) - rx_buf->len;
            size_t to_copy = MIN(space_left, evt->data.rx.len);
            if (to_copy == 0) {
                uart_rx_disable(uart);
                return;
            }
            memcpy(&rx_buf->data[rx_buf->len],
                   &evt->data.rx.buf[evt->data.rx.offset],
                   to_copy);
            rx_buf->len += to_copy;

            if (disable_req) return;

            /* 임계치 도달 시 끊어서 처리 */
            if (rx_buf->len >= UART_FLUSH_THRESHOLD) {
                disable_req = true;
                uart_rx_disable(uart);
            }
        }
        break;

    case UART_RX_DISABLED:
        disable_req = false;

        /* 받은 데이터가 있으면 BLE로 프레임 전송 (워크로 처리) */
        if (rx_buf && rx_buf->len > 0) {
            pending_buf = rx_buf;
            rx_buf = NULL;
            k_work_submit(&ble_send_work);
        } else {
            if (rx_buf) k_free(rx_buf);
            rx_buf = NULL;
        }

        /* 새 버퍼로 다시 수신 */
        rx_buf = k_malloc(sizeof(*rx_buf));
        if (!rx_buf) {
            LOG_WRN("rx malloc failed, reschedule rx enable");
            k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
            return;
        }
        rx_buf->len = 0;
        uart_rx_enable(uart, rx_buf->data, sizeof(rx_buf->data), UART_WAIT_FOR_RX);
        break;

    case UART_RX_BUF_REQUEST:
        rx_buf = k_malloc(sizeof(*rx_buf));
        if (rx_buf) {
            rx_buf->len = 0;
            uart_rx_buf_rsp(uart, rx_buf->data, sizeof(rx_buf->data));
        } else {
            LOG_WRN("malloc failed on BUF_REQUEST");
        }
        break;

    case UART_RX_BUF_RELEASED: {
        struct uart_data_t *released_buf =
            CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t, data[0]);
        if (released_buf->len > 0) {
            k_fifo_put(&fifo_uart_rx_data, released_buf);
        } else {
            k_free(released_buf);
        }
    } break;

    default:
        break;
    }
}

/* UART 워크/초기화 */
static void uart_work_handler(struct k_work *item)
{
    struct uart_data_t *buf = k_malloc(sizeof(*buf));
    if (!buf) {
        LOG_WRN("rx alloc failed, reschedule");
        k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
        return;
    }
    buf->len = 0;
    uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
}

static bool uart_test_async_api(const struct device *dev)
{
    const struct uart_driver_api *api =
        (const struct uart_driver_api *)dev->api;
    return (api->callback_set != NULL);
}

static int uart_init_wrap(void)
{
    int err;
    struct uart_data_t *rx;

    if (!device_is_ready(uart)) {
        return -ENODEV;
    }

    if (IS_ENABLED(CONFIG_USB_DEVICE_STACK)) {
        err = usb_enable(NULL);
        if (err && (err != -EALREADY)) {
            LOG_ERR("Failed to enable USB");
            return err;
        }
    }

    rx = k_malloc(sizeof(*rx));
    if (!rx) return -ENOMEM;
    rx->len = 0;

    k_work_init_delayable(&uart_work, uart_work_handler);

    if (IS_ENABLED(CONFIG_UART_ASYNC_ADAPTER) && !uart_test_async_api(uart)) {
        uart_async_adapter_init(async_adapter, uart);
        uart = async_adapter;
    }

    err = uart_callback_set(uart, uart_cb, NULL);
    if (err) {
        k_free(rx);
        LOG_ERR("Cannot initialize UART callback");
        return err;
    }

    /* 시작 메시지(개발용) */
    struct uart_data_t *tx = k_malloc(sizeof(*tx));
    if (tx) {
        const char *msg = "Starting NUS peripheral (Binary+Frame, BURST+BP)\r\n";
        size_t n = MIN(sizeof(tx->data), strlen(msg));
        memcpy(tx->data, msg, n);
        tx->len = (uint16_t)n;
        err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
        if (err) {
            k_fifo_put(&fifo_uart_tx_data, tx);
        }
    }

    err = uart_rx_enable(uart, rx->data, sizeof(rx->data), UART_WAIT_FOR_RX);
    if (err) {
        LOG_ERR("Cannot enable uart reception (err: %d)", err);
        k_free(rx);
    }
    return err;
}

/* ============================================================
 *                        BLE 연결 콜백
 * ============================================================*/
static void connected(struct bt_conn *conn, uint8_t err)
{
    char addr[BT_ADDR_LE_STR_LEN];

    if (err) {
        LOG_ERR("Connection failed, err 0x%02x %s", err, bt_hci_err_to_str(err));
        return;
    }

    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    current_conn = bt_conn_ref(conn);
    dk_set_led_on(CON_STATUS_LED);
    update_mtu_from_conn(conn);

    /* --- Data Length Update (유지) --- */
#if defined(CONFIG_BT_DATA_LEN_UPDATE)
    const struct bt_conn_le_data_len_param dlen = {
        .tx_max_len  = 251,
        .tx_max_time = 2120,
    };
    int err_dle = bt_conn_le_data_len_update(conn, &dlen);
    if (err_dle) {
        LOG_WRN("DLE request failed: %d", err_dle);
    }
#endif

    /* --- PHY 2M 요청: 일부 빌드에서 심볼이 빠져 링크 에러 → 안전 가드 --- */
#if defined(CONFIG_BT_PHY_UPDATE) && !defined(DISABLE_PHY_UPDATE_WORKAROUND)
    /* 
     * 일부 NCS 빌드/컨트롤러 조합에서는 bt_conn_le_phy_update가 링크되지 않습니다.
     * 그럴 땐 아래 #if를 0으로 바꾸거나, DISABLE_PHY_UPDATE_WORKAROUND를 prj.conf에
     * 추가해(=정의) 이 블록을 비활성화하세요.
     */
    #if 0
    struct bt_conn_le_phy_param phy = {
        .pref_tx_phy = BT_GAP_LE_PHY_2M,
        .pref_rx_phy = BT_GAP_LE_PHY_2M,
    };
    int err_phy = bt_conn_le_phy_update(conn, &phy);
    if (err_phy) {
        LOG_WRN("PHY update request failed: %d", err_phy);
    }
    #endif
#endif

    /* --- 연결 파라미터 --- */
    struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 12, 0, 400); /* 7.5~15ms */
    int err_cp = bt_conn_le_param_update(conn, param);
    if (err_cp) {
        LOG_WRN("Conn param update failed: %d", err_cp);
    }

    LOG_INF("Connected: %s (MTU %u)", addr, bt_gatt_get_mtu(conn));
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

    LOG_INF("Disconnected: %s, reason 0x%02x %s", addr, reason, bt_hci_err_to_str(reason));

    if (auth_conn) {
        bt_conn_unref(auth_conn);
        auth_conn = NULL;
    }
    if (current_conn) {
        bt_conn_unref(current_conn);
        current_conn = NULL;
        dk_set_led_off(CON_STATUS_LED);
    }
}

#ifdef CONFIG_BT_NUS_SECURITY_ENABLED
static void security_changed(struct bt_conn *conn, bt_security_t level,
                             enum bt_security_err err)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    if (!err) {
        LOG_INF("Security changed: %s level %u", addr, level);
    } else {
        LOG_WRN("Security failed: %s level %u err %d %s", addr, level, err,
                bt_security_err_to_str(err));
    }
}
#endif

BT_CONN_CB_DEFINE(conn_callbacks) = {
    .connected    = connected,
    .disconnected = disconnected,
#ifdef CONFIG_BT_NUS_SECURITY_ENABLED
    .security_changed = security_changed,
#endif
};

#if defined(CONFIG_BT_NUS_SECURITY_ENABLED)
/* (보안 콜백 원본 유지) */
static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Passkey for %s: %06u", addr, passkey);
}

static void auth_passkey_confirm(struct bt_conn *conn, unsigned int passkey)
{
    char addr[BT_ADDR_LE_STR_LEN];
    auth_conn = bt_conn_ref(conn);
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Passkey for %s: %06u", addr, passkey);
    LOG_INF("Press Button to confirm/reject.");
}

static void auth_cancel(struct bt_conn *conn)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing cancelled: %s", addr);
}

static void pairing_complete(struct bt_conn *conn, bool bonded)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing completed: %s, bonded: %d", addr, bonded);
}

static void pairing_failed(struct bt_conn *conn, enum bt_security_err reason)
{
    char addr[BT_ADDR_LE_STR_LEN];
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    LOG_INF("Pairing failed conn: %s, reason %d %s", addr, reason,
            bt_security_err_to_str(reason));
}

static struct bt_conn_auth_cb conn_auth_callbacks = {
    .passkey_display = auth_passkey_display,
    .passkey_confirm = auth_passkey_confirm,
    .cancel = auth_cancel,
};

static struct bt_conn_auth_info_cb conn_auth_info_callbacks = {
    .pairing_complete = pairing_complete,
    .pairing_failed   = pairing_failed
};
#else
static struct bt_conn_auth_cb conn_auth_callbacks;
static struct bt_conn_auth_info_cb conn_auth_info_callbacks;
#endif

/* ============================================================
 *                       기타 유틸
 * ============================================================*/
static void error(void)
{
    dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
    while (true) { k_sleep(K_MSEC(1000)); }
}

#ifdef CONFIG_BT_NUS_SECURITY_ENABLED
static void num_comp_reply(bool accept)
{
    if (accept) {
        bt_conn_auth_passkey_confirm(auth_conn);
    } else {
        bt_conn_auth_cancel(auth_conn);
    }
    bt_conn_unref(auth_conn);
    auth_conn = NULL;
}

void button_changed(uint32_t button_state, uint32_t has_changed)
{
    uint32_t buttons = button_state & has_changed;
    if (auth_conn) {
        if (buttons & KEY_PASSKEY_ACCEPT) num_comp_reply(true);
        if (buttons & KEY_PASSKEY_REJECT) num_comp_reply(false);
    }
}
#endif

static void configure_gpio(void)
{
    int err;
#ifdef CONFIG_BT_NUS_SECURITY_ENABLED
    err = dk_buttons_init(button_changed);
    if (err) { LOG_ERR("Cannot init buttons (err: %d)", err); }
#endif
    err = dk_leds_init();
    if (err) { LOG_ERR("Cannot init LEDs (err: %d)", err); }
}

/* ============================================================
 *              BLE로 보낼 워크 핸들러 (UART 수신 → 프레임)
 * ============================================================*/
static void ble_send_work_handler(struct k_work *work)
{
    if (!current_conn || !pending_buf) {
        printk("[PERIPHERAL] No BLE conn or buffer, skip\n");
        return;
    }

    /* pending_buf 내용을 payload로 하여 프레임 전송 */
    struct uart_data_t *copy = pending_buf;
    pending_buf = NULL;

    int err = send_frame_over_nus(copy->data, copy->len, DEFAULT_CH_MASK, 0x00);
    if (err) {
        printk("[PERIPHERAL] BLE send failed (err: %d)\n", err);
    }
    k_free(copy);
}

/* ============================================================
 *                          main()
 * ============================================================*/
int main(void)
{
    int blink_status = 0;
    int err = 0;

    configure_gpio();
    k_work_init(&ble_send_work, ble_send_work_handler);

    err = uart_init_wrap();
    if (err) {
        error();
    }

    /* UART 시작 메세지(개발용) */
    {
        struct uart_data_t *tx = k_malloc(sizeof(*tx));
        if (tx) {
            snprintf((char*)tx->data, sizeof(tx->data), "Test startup TX\n");
            tx->len = (uint16_t)strlen((char*)tx->data);
            uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
            /* free는 TX_DONE에서 */
        }
    }

#if defined(CONFIG_BT_NUS_SECURITY_ENABLED)
    err = bt_conn_auth_cb_register(&conn_auth_callbacks);
    if (err) {
        printk("Failed to register authorization callbacks.\n");
        return 0;
    }
    err = bt_conn_auth_info_cb_register(&conn_auth_info_callbacks);
    if (err) {
        printk("Failed to register authorization info callbacks.\n");
        return 0;
    }
#endif

    printk("4-channel ADC burst to BLE start (timerless + backpressure)\n");

    if (!device_is_ready(adc_dev)) {
        printk("ADC device not ready!\n");
        return 0;
    }
    /* 개별 채널 setup은 adc_read_4ch에서 수행 */

    err = bt_enable(NULL);
    if (err) {
        LOG_ERR("Bluetooth init failed (err %d)", err);
        return 0;
    }
    LOG_INF("Bluetooth initialized");

    k_sem_give(&ble_init_ok);

    if (IS_ENABLED(CONFIG_SETTINGS)) {
        settings_load();
    }

    err = bt_nus_init(&nus_cb);
    if (err) {
        LOG_ERR("Failed to initialize UART service (err: %d)", err);
        return 0;
    }

    err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd, ARRAY_SIZE(sd));
    if (err) {
        LOG_ERR("Advertising failed to start (err %d)", err);
        return 0;
    }

    for (;;) {
        dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
        k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
    }
    return 0;
}
